// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: riva/proto/riva_tts.proto

package riva_speech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RivaSynthesisConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If model is specified only return config for model, otherwise return all
	// configs.
	ModelName     string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaSynthesisConfigRequest) Reset() {
	*x = RivaSynthesisConfigRequest{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaSynthesisConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaSynthesisConfigRequest) ProtoMessage() {}

func (x *RivaSynthesisConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaSynthesisConfigRequest.ProtoReflect.Descriptor instead.
func (*RivaSynthesisConfigRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{0}
}

func (x *RivaSynthesisConfigRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type RivaSynthesisConfigResponse struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	ModelConfig   []*RivaSynthesisConfigResponse_Config `protobuf:"bytes,1,rep,name=model_config,json=modelConfig,proto3" json:"model_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaSynthesisConfigResponse) Reset() {
	*x = RivaSynthesisConfigResponse{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaSynthesisConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaSynthesisConfigResponse) ProtoMessage() {}

func (x *RivaSynthesisConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaSynthesisConfigResponse.ProtoReflect.Descriptor instead.
func (*RivaSynthesisConfigResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{1}
}

func (x *RivaSynthesisConfigResponse) GetModelConfig() []*RivaSynthesisConfigResponse_Config {
	if x != nil {
		return x.ModelConfig
	}
	return nil
}

// Required for Zero Shot model
type ZeroShotData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Audio prompt for Zero Shot model. Duration should be between 3 to 10 seconds.
	AudioPrompt []byte `protobuf:"bytes,1,opt,name=audio_prompt,json=audioPrompt,proto3" json:"audio_prompt,omitempty"`
	// Sample rate for input audio prompt.
	SampleRateHz int32 `protobuf:"varint,2,opt,name=sample_rate_hz,json=sampleRateHz,proto3" json:"sample_rate_hz,omitempty"`
	// Encoding of audio prompt. Supported encodings are LINEAR_PCM and OGGOPUS.
	Encoding AudioEncoding `protobuf:"varint,3,opt,name=encoding,proto3,enum=nvidia.riva.AudioEncoding" json:"encoding,omitempty"`
	// The number of times user wants to pass audio through decoder. This ranges
	// between 1-40. Defaults to 20.
	Quality       int32 `protobuf:"varint,4,opt,name=quality,proto3" json:"quality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ZeroShotData) Reset() {
	*x = ZeroShotData{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ZeroShotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZeroShotData) ProtoMessage() {}

func (x *ZeroShotData) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZeroShotData.ProtoReflect.Descriptor instead.
func (*ZeroShotData) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{2}
}

func (x *ZeroShotData) GetAudioPrompt() []byte {
	if x != nil {
		return x.AudioPrompt
	}
	return nil
}

func (x *ZeroShotData) GetSampleRateHz() int32 {
	if x != nil {
		return x.SampleRateHz
	}
	return 0
}

func (x *ZeroShotData) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_ENCODING_UNSPECIFIED
}

func (x *ZeroShotData) GetQuality() int32 {
	if x != nil {
		return x.Quality
	}
	return 0
}

type SynthesizeSpeechRequest struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Text         string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	LanguageCode string                 `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	// audio encoding params
	Encoding     AudioEncoding `protobuf:"varint,3,opt,name=encoding,proto3,enum=nvidia.riva.AudioEncoding" json:"encoding,omitempty"`
	SampleRateHz int32         `protobuf:"varint,4,opt,name=sample_rate_hz,json=sampleRateHz,proto3" json:"sample_rate_hz,omitempty"`
	// voice params
	VoiceName string `protobuf:"bytes,5,opt,name=voice_name,json=voiceName,proto3" json:"voice_name,omitempty"`
	// Zero Shot model params
	ZeroShotData *ZeroShotData `protobuf:"bytes,6,opt,name=zero_shot_data,json=zeroShotData,proto3" json:"zero_shot_data,omitempty"`
	// A string containing comma-separated key-value pairs of
	// grapheme and corresponding phoneme separated by double spaces.
	CustomDictionary string `protobuf:"bytes,7,opt,name=custom_dictionary,json=customDictionary,proto3" json:"custom_dictionary,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynthesizeSpeechRequest) Reset() {
	*x = SynthesizeSpeechRequest{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesizeSpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeSpeechRequest) ProtoMessage() {}

func (x *SynthesizeSpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeSpeechRequest.ProtoReflect.Descriptor instead.
func (*SynthesizeSpeechRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{3}
}

func (x *SynthesizeSpeechRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SynthesizeSpeechRequest) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *SynthesizeSpeechRequest) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_ENCODING_UNSPECIFIED
}

func (x *SynthesizeSpeechRequest) GetSampleRateHz() int32 {
	if x != nil {
		return x.SampleRateHz
	}
	return 0
}

func (x *SynthesizeSpeechRequest) GetVoiceName() string {
	if x != nil {
		return x.VoiceName
	}
	return ""
}

func (x *SynthesizeSpeechRequest) GetZeroShotData() *ZeroShotData {
	if x != nil {
		return x.ZeroShotData
	}
	return nil
}

func (x *SynthesizeSpeechRequest) GetCustomDictionary() string {
	if x != nil {
		return x.CustomDictionary
	}
	return ""
}

func (x *SynthesizeSpeechRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type SynthesizeSpeechResponseMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Currently experimental API addition that returns the input text
	// after preprocessing has been completed as well as the predicted
	// duration for each token.
	// Note: this message is subject to future breaking changes, and potential
	// removal.
	Text               string    `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	ProcessedText      string    `protobuf:"bytes,2,opt,name=processed_text,json=processedText,proto3" json:"processed_text,omitempty"`
	PredictedDurations []float32 `protobuf:"fixed32,8,rep,packed,name=predicted_durations,json=predictedDurations,proto3" json:"predicted_durations,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SynthesizeSpeechResponseMetadata) Reset() {
	*x = SynthesizeSpeechResponseMetadata{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesizeSpeechResponseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeSpeechResponseMetadata) ProtoMessage() {}

func (x *SynthesizeSpeechResponseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeSpeechResponseMetadata.ProtoReflect.Descriptor instead.
func (*SynthesizeSpeechResponseMetadata) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{4}
}

func (x *SynthesizeSpeechResponseMetadata) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SynthesizeSpeechResponseMetadata) GetProcessedText() string {
	if x != nil {
		return x.ProcessedText
	}
	return ""
}

func (x *SynthesizeSpeechResponseMetadata) GetPredictedDurations() []float32 {
	if x != nil {
		return x.PredictedDurations
	}
	return nil
}

type SynthesizeSpeechResponse struct {
	state protoimpl.MessageState            `protogen:"open.v1"`
	Audio []byte                            `protobuf:"bytes,1,opt,name=audio,proto3" json:"audio,omitempty"`
	Meta  *SynthesizeSpeechResponseMetadata `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
	// The ID associated with the request
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynthesizeSpeechResponse) Reset() {
	*x = SynthesizeSpeechResponse{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesizeSpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeSpeechResponse) ProtoMessage() {}

func (x *SynthesizeSpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeSpeechResponse.ProtoReflect.Descriptor instead.
func (*SynthesizeSpeechResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{5}
}

func (x *SynthesizeSpeechResponse) GetAudio() []byte {
	if x != nil {
		return x.Audio
	}
	return nil
}

func (x *SynthesizeSpeechResponse) GetMeta() *SynthesizeSpeechResponseMetadata {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *SynthesizeSpeechResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type RivaSynthesisConfigResponse_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaSynthesisConfigResponse_Config) Reset() {
	*x = RivaSynthesisConfigResponse_Config{}
	mi := &file_riva_proto_riva_tts_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaSynthesisConfigResponse_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaSynthesisConfigResponse_Config) ProtoMessage() {}

func (x *RivaSynthesisConfigResponse_Config) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_tts_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaSynthesisConfigResponse_Config.ProtoReflect.Descriptor instead.
func (*RivaSynthesisConfigResponse_Config) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_tts_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RivaSynthesisConfigResponse_Config) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *RivaSynthesisConfigResponse_Config) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_riva_proto_riva_tts_proto protoreflect.FileDescriptor

var file_riva_proto_riva_tts_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76,
	0x61, 0x5f, 0x74, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x1a, 0x1b, 0x72, 0x69,
	0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x61, 0x75,
	0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x72, 0x69, 0x76, 0x61, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3b, 0x0a, 0x1a, 0x52, 0x69, 0x76, 0x61, 0x53,
	0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0xc3, 0x02, 0x0a, 0x1b, 0x52, 0x69, 0x76, 0x61, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x76,
	0x61, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xcb, 0x01, 0x0a,
	0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x76,
	0x61, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x5a,
	0x65, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68, 0x7a,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x48, 0x7a, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x71,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xe9, 0x02, 0x0a, 0x17, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x68, 0x7a, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76,
	0x6f, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x7a, 0x65, 0x72, 0x6f,
	0x5f, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74,
	0x74, 0x73, 0x2e, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0c, 0x7a, 0x65, 0x72, 0x6f, 0x53, 0x68, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a,
	0x11, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x20, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x9f, 0x01, 0x0a, 0x18, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x45, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x26, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x32, 0xde, 0x02, 0x0a, 0x13, 0x52, 0x69, 0x76, 0x61, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x12, 0x63, 0x0a,
	0x0a, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x28, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x6b, 0x0a, 0x10, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74,
	0x74, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x75, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x52, 0x69, 0x76, 0x61, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x76, 0x61,
	0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x53, 0x79, 0x6e,
	0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1b, 0x5a, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_riva_proto_riva_tts_proto_rawDescOnce sync.Once
	file_riva_proto_riva_tts_proto_rawDescData []byte
)

func file_riva_proto_riva_tts_proto_rawDescGZIP() []byte {
	file_riva_proto_riva_tts_proto_rawDescOnce.Do(func() {
		file_riva_proto_riva_tts_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_riva_proto_riva_tts_proto_rawDesc), len(file_riva_proto_riva_tts_proto_rawDesc)))
	})
	return file_riva_proto_riva_tts_proto_rawDescData
}

var file_riva_proto_riva_tts_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_riva_proto_riva_tts_proto_goTypes = []any{
	(*RivaSynthesisConfigRequest)(nil),         // 0: nvidia.riva.tts.RivaSynthesisConfigRequest
	(*RivaSynthesisConfigResponse)(nil),        // 1: nvidia.riva.tts.RivaSynthesisConfigResponse
	(*ZeroShotData)(nil),                       // 2: nvidia.riva.tts.ZeroShotData
	(*SynthesizeSpeechRequest)(nil),            // 3: nvidia.riva.tts.SynthesizeSpeechRequest
	(*SynthesizeSpeechResponseMetadata)(nil),   // 4: nvidia.riva.tts.SynthesizeSpeechResponseMetadata
	(*SynthesizeSpeechResponse)(nil),           // 5: nvidia.riva.tts.SynthesizeSpeechResponse
	(*RivaSynthesisConfigResponse_Config)(nil), // 6: nvidia.riva.tts.RivaSynthesisConfigResponse.Config
	nil,                // 7: nvidia.riva.tts.RivaSynthesisConfigResponse.Config.ParametersEntry
	(AudioEncoding)(0), // 8: nvidia.riva.AudioEncoding
	(*RequestId)(nil),  // 9: nvidia.riva.RequestId
}
var file_riva_proto_riva_tts_proto_depIdxs = []int32{
	6,  // 0: nvidia.riva.tts.RivaSynthesisConfigResponse.model_config:type_name -> nvidia.riva.tts.RivaSynthesisConfigResponse.Config
	8,  // 1: nvidia.riva.tts.ZeroShotData.encoding:type_name -> nvidia.riva.AudioEncoding
	8,  // 2: nvidia.riva.tts.SynthesizeSpeechRequest.encoding:type_name -> nvidia.riva.AudioEncoding
	2,  // 3: nvidia.riva.tts.SynthesizeSpeechRequest.zero_shot_data:type_name -> nvidia.riva.tts.ZeroShotData
	9,  // 4: nvidia.riva.tts.SynthesizeSpeechRequest.id:type_name -> nvidia.riva.RequestId
	4,  // 5: nvidia.riva.tts.SynthesizeSpeechResponse.meta:type_name -> nvidia.riva.tts.SynthesizeSpeechResponseMetadata
	9,  // 6: nvidia.riva.tts.SynthesizeSpeechResponse.id:type_name -> nvidia.riva.RequestId
	7,  // 7: nvidia.riva.tts.RivaSynthesisConfigResponse.Config.parameters:type_name -> nvidia.riva.tts.RivaSynthesisConfigResponse.Config.ParametersEntry
	3,  // 8: nvidia.riva.tts.RivaSpeechSynthesis.Synthesize:input_type -> nvidia.riva.tts.SynthesizeSpeechRequest
	3,  // 9: nvidia.riva.tts.RivaSpeechSynthesis.SynthesizeOnline:input_type -> nvidia.riva.tts.SynthesizeSpeechRequest
	0,  // 10: nvidia.riva.tts.RivaSpeechSynthesis.GetRivaSynthesisConfig:input_type -> nvidia.riva.tts.RivaSynthesisConfigRequest
	5,  // 11: nvidia.riva.tts.RivaSpeechSynthesis.Synthesize:output_type -> nvidia.riva.tts.SynthesizeSpeechResponse
	5,  // 12: nvidia.riva.tts.RivaSpeechSynthesis.SynthesizeOnline:output_type -> nvidia.riva.tts.SynthesizeSpeechResponse
	1,  // 13: nvidia.riva.tts.RivaSpeechSynthesis.GetRivaSynthesisConfig:output_type -> nvidia.riva.tts.RivaSynthesisConfigResponse
	11, // [11:14] is the sub-list for method output_type
	8,  // [8:11] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_riva_proto_riva_tts_proto_init() }
func file_riva_proto_riva_tts_proto_init() {
	if File_riva_proto_riva_tts_proto != nil {
		return
	}
	file_riva_proto_riva_audio_proto_init()
	file_riva_proto_riva_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_riva_proto_riva_tts_proto_rawDesc), len(file_riva_proto_riva_tts_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_riva_proto_riva_tts_proto_goTypes,
		DependencyIndexes: file_riva_proto_riva_tts_proto_depIdxs,
		MessageInfos:      file_riva_proto_riva_tts_proto_msgTypes,
	}.Build()
	File_riva_proto_riva_tts_proto = out.File
	file_riva_proto_riva_tts_proto_goTypes = nil
	file_riva_proto_riva_tts_proto_depIdxs = nil
}
