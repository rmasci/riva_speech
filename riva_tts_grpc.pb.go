// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: riva/proto/riva_tts.proto

package riva_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RivaSpeechSynthesis_Synthesize_FullMethodName             = "/nvidia.riva.tts.RivaSpeechSynthesis/Synthesize"
	RivaSpeechSynthesis_SynthesizeOnline_FullMethodName       = "/nvidia.riva.tts.RivaSpeechSynthesis/SynthesizeOnline"
	RivaSpeechSynthesis_GetRivaSynthesisConfig_FullMethodName = "/nvidia.riva.tts.RivaSpeechSynthesis/GetRivaSynthesisConfig"
)

// RivaSpeechSynthesisClient is the client API for RivaSpeechSynthesis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RivaSpeechSynthesisClient interface {
	// Used to request text-to-speech from the service. Submit a request
	// containing the desired text and configuration, and receive audio bytes in
	// the requested format.
	Synthesize(ctx context.Context, in *SynthesizeSpeechRequest, opts ...grpc.CallOption) (*SynthesizeSpeechResponse, error)
	// Used to request text-to-speech returned via stream as it becomes available.
	// Submit a SynthesizeSpeechRequest with desired text and configuration,
	// and receive stream of bytes in the requested format.
	SynthesizeOnline(ctx context.Context, in *SynthesizeSpeechRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SynthesizeSpeechResponse], error)
	// Enables clients to request the configuration of the current Synthesize
	// service, or a specific model within the service.
	GetRivaSynthesisConfig(ctx context.Context, in *RivaSynthesisConfigRequest, opts ...grpc.CallOption) (*RivaSynthesisConfigResponse, error)
}

type rivaSpeechSynthesisClient struct {
	cc grpc.ClientConnInterface
}

func NewRivaSpeechSynthesisClient(cc grpc.ClientConnInterface) RivaSpeechSynthesisClient {
	return &rivaSpeechSynthesisClient{cc}
}

func (c *rivaSpeechSynthesisClient) Synthesize(ctx context.Context, in *SynthesizeSpeechRequest, opts ...grpc.CallOption) (*SynthesizeSpeechResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SynthesizeSpeechResponse)
	err := c.cc.Invoke(ctx, RivaSpeechSynthesis_Synthesize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaSpeechSynthesisClient) SynthesizeOnline(ctx context.Context, in *SynthesizeSpeechRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SynthesizeSpeechResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RivaSpeechSynthesis_ServiceDesc.Streams[0], RivaSpeechSynthesis_SynthesizeOnline_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SynthesizeSpeechRequest, SynthesizeSpeechResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaSpeechSynthesis_SynthesizeOnlineClient = grpc.ServerStreamingClient[SynthesizeSpeechResponse]

func (c *rivaSpeechSynthesisClient) GetRivaSynthesisConfig(ctx context.Context, in *RivaSynthesisConfigRequest, opts ...grpc.CallOption) (*RivaSynthesisConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RivaSynthesisConfigResponse)
	err := c.cc.Invoke(ctx, RivaSpeechSynthesis_GetRivaSynthesisConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RivaSpeechSynthesisServer is the server API for RivaSpeechSynthesis service.
// All implementations must embed UnimplementedRivaSpeechSynthesisServer
// for forward compatibility.
type RivaSpeechSynthesisServer interface {
	// Used to request text-to-speech from the service. Submit a request
	// containing the desired text and configuration, and receive audio bytes in
	// the requested format.
	Synthesize(context.Context, *SynthesizeSpeechRequest) (*SynthesizeSpeechResponse, error)
	// Used to request text-to-speech returned via stream as it becomes available.
	// Submit a SynthesizeSpeechRequest with desired text and configuration,
	// and receive stream of bytes in the requested format.
	SynthesizeOnline(*SynthesizeSpeechRequest, grpc.ServerStreamingServer[SynthesizeSpeechResponse]) error
	// Enables clients to request the configuration of the current Synthesize
	// service, or a specific model within the service.
	GetRivaSynthesisConfig(context.Context, *RivaSynthesisConfigRequest) (*RivaSynthesisConfigResponse, error)
	mustEmbedUnimplementedRivaSpeechSynthesisServer()
}

// UnimplementedRivaSpeechSynthesisServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRivaSpeechSynthesisServer struct{}

func (UnimplementedRivaSpeechSynthesisServer) Synthesize(context.Context, *SynthesizeSpeechRequest) (*SynthesizeSpeechResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synthesize not implemented")
}
func (UnimplementedRivaSpeechSynthesisServer) SynthesizeOnline(*SynthesizeSpeechRequest, grpc.ServerStreamingServer[SynthesizeSpeechResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SynthesizeOnline not implemented")
}
func (UnimplementedRivaSpeechSynthesisServer) GetRivaSynthesisConfig(context.Context, *RivaSynthesisConfigRequest) (*RivaSynthesisConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRivaSynthesisConfig not implemented")
}
func (UnimplementedRivaSpeechSynthesisServer) mustEmbedUnimplementedRivaSpeechSynthesisServer() {}
func (UnimplementedRivaSpeechSynthesisServer) testEmbeddedByValue()                             {}

// UnsafeRivaSpeechSynthesisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivaSpeechSynthesisServer will
// result in compilation errors.
type UnsafeRivaSpeechSynthesisServer interface {
	mustEmbedUnimplementedRivaSpeechSynthesisServer()
}

func RegisterRivaSpeechSynthesisServer(s grpc.ServiceRegistrar, srv RivaSpeechSynthesisServer) {
	// If the following call pancis, it indicates UnimplementedRivaSpeechSynthesisServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RivaSpeechSynthesis_ServiceDesc, srv)
}

func _RivaSpeechSynthesis_Synthesize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynthesizeSpeechRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaSpeechSynthesisServer).Synthesize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaSpeechSynthesis_Synthesize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaSpeechSynthesisServer).Synthesize(ctx, req.(*SynthesizeSpeechRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaSpeechSynthesis_SynthesizeOnline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SynthesizeSpeechRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RivaSpeechSynthesisServer).SynthesizeOnline(m, &grpc.GenericServerStream[SynthesizeSpeechRequest, SynthesizeSpeechResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaSpeechSynthesis_SynthesizeOnlineServer = grpc.ServerStreamingServer[SynthesizeSpeechResponse]

func _RivaSpeechSynthesis_GetRivaSynthesisConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RivaSynthesisConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaSpeechSynthesisServer).GetRivaSynthesisConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaSpeechSynthesis_GetRivaSynthesisConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaSpeechSynthesisServer).GetRivaSynthesisConfig(ctx, req.(*RivaSynthesisConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RivaSpeechSynthesis_ServiceDesc is the grpc.ServiceDesc for RivaSpeechSynthesis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivaSpeechSynthesis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.riva.tts.RivaSpeechSynthesis",
	HandlerType: (*RivaSpeechSynthesisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Synthesize",
			Handler:    _RivaSpeechSynthesis_Synthesize_Handler,
		},
		{
			MethodName: "GetRivaSynthesisConfig",
			Handler:    _RivaSpeechSynthesis_GetRivaSynthesisConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SynthesizeOnline",
			Handler:       _RivaSpeechSynthesis_SynthesizeOnline_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "riva/proto/riva_tts.proto",
}
