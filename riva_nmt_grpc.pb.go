// Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: riva/proto/riva_nmt.proto

package riva_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RivaTranslation_TranslateText_FullMethodName                    = "/nvidia.riva.nmt.RivaTranslation/TranslateText"
	RivaTranslation_ListSupportedLanguagePairs_FullMethodName       = "/nvidia.riva.nmt.RivaTranslation/ListSupportedLanguagePairs"
	RivaTranslation_StreamingTranslateSpeechToText_FullMethodName   = "/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToText"
	RivaTranslation_StreamingTranslateSpeechToSpeech_FullMethodName = "/nvidia.riva.nmt.RivaTranslation/StreamingTranslateSpeechToSpeech"
)

// RivaTranslationClient is the client API for RivaTranslation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
//	RivaTranslation service provides rpcs to translate between languages.
type RivaTranslationClient interface {
	// Translate text to text, from a source to a target language.  Currently
	// source and target language fields is required, along with the model name.
	// Multiple texts may be passed per request up to the given batch size for the
	// model, which is set at translation pipeline creation time.
	TranslateText(ctx context.Context, in *TranslateTextRequest, opts ...grpc.CallOption) (*TranslateTextResponse, error)
	// Lists the available language pairs and models names to be used for
	// TranslateText
	ListSupportedLanguagePairs(ctx context.Context, in *AvailableLanguageRequest, opts ...grpc.CallOption) (*AvailableLanguageResponse, error)
	// streaming speech to text translation api.
	StreamingTranslateSpeechToText(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse], error)
	StreamingTranslateSpeechToSpeech(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse], error)
}

type rivaTranslationClient struct {
	cc grpc.ClientConnInterface
}

func NewRivaTranslationClient(cc grpc.ClientConnInterface) RivaTranslationClient {
	return &rivaTranslationClient{cc}
}

func (c *rivaTranslationClient) TranslateText(ctx context.Context, in *TranslateTextRequest, opts ...grpc.CallOption) (*TranslateTextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslateTextResponse)
	err := c.cc.Invoke(ctx, RivaTranslation_TranslateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaTranslationClient) ListSupportedLanguagePairs(ctx context.Context, in *AvailableLanguageRequest, opts ...grpc.CallOption) (*AvailableLanguageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AvailableLanguageResponse)
	err := c.cc.Invoke(ctx, RivaTranslation_ListSupportedLanguagePairs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaTranslationClient) StreamingTranslateSpeechToText(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RivaTranslation_ServiceDesc.Streams[0], RivaTranslation_StreamingTranslateSpeechToText_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaTranslation_StreamingTranslateSpeechToTextClient = grpc.BidiStreamingClient[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]

func (c *rivaTranslationClient) StreamingTranslateSpeechToSpeech(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RivaTranslation_ServiceDesc.Streams[1], RivaTranslation_StreamingTranslateSpeechToSpeech_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaTranslation_StreamingTranslateSpeechToSpeechClient = grpc.BidiStreamingClient[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]

// RivaTranslationServer is the server API for RivaTranslation service.
// All implementations must embed UnimplementedRivaTranslationServer
// for forward compatibility.
//
//	RivaTranslation service provides rpcs to translate between languages.
type RivaTranslationServer interface {
	// Translate text to text, from a source to a target language.  Currently
	// source and target language fields is required, along with the model name.
	// Multiple texts may be passed per request up to the given batch size for the
	// model, which is set at translation pipeline creation time.
	TranslateText(context.Context, *TranslateTextRequest) (*TranslateTextResponse, error)
	// Lists the available language pairs and models names to be used for
	// TranslateText
	ListSupportedLanguagePairs(context.Context, *AvailableLanguageRequest) (*AvailableLanguageResponse, error)
	// streaming speech to text translation api.
	StreamingTranslateSpeechToText(grpc.BidiStreamingServer[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]) error
	StreamingTranslateSpeechToSpeech(grpc.BidiStreamingServer[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]) error
	mustEmbedUnimplementedRivaTranslationServer()
}

// UnimplementedRivaTranslationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRivaTranslationServer struct{}

func (UnimplementedRivaTranslationServer) TranslateText(context.Context, *TranslateTextRequest) (*TranslateTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranslateText not implemented")
}
func (UnimplementedRivaTranslationServer) ListSupportedLanguagePairs(context.Context, *AvailableLanguageRequest) (*AvailableLanguageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSupportedLanguagePairs not implemented")
}
func (UnimplementedRivaTranslationServer) StreamingTranslateSpeechToText(grpc.BidiStreamingServer[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingTranslateSpeechToText not implemented")
}
func (UnimplementedRivaTranslationServer) StreamingTranslateSpeechToSpeech(grpc.BidiStreamingServer[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingTranslateSpeechToSpeech not implemented")
}
func (UnimplementedRivaTranslationServer) mustEmbedUnimplementedRivaTranslationServer() {}
func (UnimplementedRivaTranslationServer) testEmbeddedByValue()                         {}

// UnsafeRivaTranslationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivaTranslationServer will
// result in compilation errors.
type UnsafeRivaTranslationServer interface {
	mustEmbedUnimplementedRivaTranslationServer()
}

func RegisterRivaTranslationServer(s grpc.ServiceRegistrar, srv RivaTranslationServer) {
	// If the following call pancis, it indicates UnimplementedRivaTranslationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RivaTranslation_ServiceDesc, srv)
}

func _RivaTranslation_TranslateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslateTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaTranslationServer).TranslateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaTranslation_TranslateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaTranslationServer).TranslateText(ctx, req.(*TranslateTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaTranslation_ListSupportedLanguagePairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableLanguageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaTranslationServer).ListSupportedLanguagePairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaTranslation_ListSupportedLanguagePairs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaTranslationServer).ListSupportedLanguagePairs(ctx, req.(*AvailableLanguageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaTranslation_StreamingTranslateSpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RivaTranslationServer).StreamingTranslateSpeechToText(&grpc.GenericServerStream[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaTranslation_StreamingTranslateSpeechToTextServer = grpc.BidiStreamingServer[StreamingTranslateSpeechToTextRequest, StreamingTranslateSpeechToTextResponse]

func _RivaTranslation_StreamingTranslateSpeechToSpeech_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RivaTranslationServer).StreamingTranslateSpeechToSpeech(&grpc.GenericServerStream[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaTranslation_StreamingTranslateSpeechToSpeechServer = grpc.BidiStreamingServer[StreamingTranslateSpeechToSpeechRequest, StreamingTranslateSpeechToSpeechResponse]

// RivaTranslation_ServiceDesc is the grpc.ServiceDesc for RivaTranslation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivaTranslation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.riva.nmt.RivaTranslation",
	HandlerType: (*RivaTranslationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TranslateText",
			Handler:    _RivaTranslation_TranslateText_Handler,
		},
		{
			MethodName: "ListSupportedLanguagePairs",
			Handler:    _RivaTranslation_ListSupportedLanguagePairs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingTranslateSpeechToText",
			Handler:       _RivaTranslation_StreamingTranslateSpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "StreamingTranslateSpeechToSpeech",
			Handler:       _RivaTranslation_StreamingTranslateSpeechToSpeech_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "riva/proto/riva_nmt.proto",
}
