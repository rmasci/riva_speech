// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: riva/proto/riva_nlp.proto

package riva_speech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RivaNLPConfigRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If model is specified only return config for model, otherwise return all
	// configs.
	ModelName     string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaNLPConfigRequest) Reset() {
	*x = RivaNLPConfigRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaNLPConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaNLPConfigRequest) ProtoMessage() {}

func (x *RivaNLPConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaNLPConfigRequest.ProtoReflect.Descriptor instead.
func (*RivaNLPConfigRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{0}
}

func (x *RivaNLPConfigRequest) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type RivaNLPConfigResponse struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	ModelConfig   []*RivaNLPConfigResponse_Config `protobuf:"bytes,1,rep,name=model_config,json=modelConfig,proto3" json:"model_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaNLPConfigResponse) Reset() {
	*x = RivaNLPConfigResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaNLPConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaNLPConfigResponse) ProtoMessage() {}

func (x *RivaNLPConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaNLPConfigResponse.ProtoReflect.Descriptor instead.
func (*RivaNLPConfigResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{1}
}

func (x *RivaNLPConfigResponse) GetModelConfig() []*RivaNLPConfigResponse_Config {
	if x != nil {
		return x.ModelConfig
	}
	return nil
}

// NLPModelParams is a metadata message that is included in every request
// message used by the Core NLP Service and is used to specify model
// characteristics/requirements
type NLPModelParams struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested model to use. If specified, this takes preference over
	// language_code.
	ModelName string `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// Specify language of the supplied text as a
	// [BCP-47](https://www.rfc-editor.org/rfc/bcp/bcp47.txt) language tag.
	// Defaults to "en-US" if not set.
	LanguageCode  string `protobuf:"bytes,3,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NLPModelParams) Reset() {
	*x = NLPModelParams{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NLPModelParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NLPModelParams) ProtoMessage() {}

func (x *NLPModelParams) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NLPModelParams.ProtoReflect.Descriptor instead.
func (*NLPModelParams) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{2}
}

func (x *NLPModelParams) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *NLPModelParams) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

// TextTransformRequest is a request type intended for services like
// TransformText which take an arbitrary text input
type TextTransformRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	Text  []string        `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	TopN  uint32          `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	Model *NLPModelParams `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextTransformRequest) Reset() {
	*x = TextTransformRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextTransformRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransformRequest) ProtoMessage() {}

func (x *TextTransformRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransformRequest.ProtoReflect.Descriptor instead.
func (*TextTransformRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{3}
}

func (x *TextTransformRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextTransformRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

func (x *TextTransformRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

func (x *TextTransformRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// TextTransformResponse is returned by the TransformText method. Responses
// are returned in the same order as they were requested.
type TextTransformResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Text  []string               `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// The ID associated with the request
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextTransformResponse) Reset() {
	*x = TextTransformResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextTransformResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextTransformResponse) ProtoMessage() {}

func (x *TextTransformResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextTransformResponse.ProtoReflect.Descriptor instead.
func (*TextTransformResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{4}
}

func (x *TextTransformResponse) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *TextTransformResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// TextClassRequest is the input message to the ClassifyText service.
type TextClassRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// Return the top N classification results for each input. 0 or 1 will return
	// top class, otherwise N. Note: Current disabled.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	TopN uint32 `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Model *NLPModelParams `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextClassRequest) Reset() {
	*x = TextClassRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassRequest) ProtoMessage() {}

func (x *TextClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassRequest.ProtoReflect.Descriptor instead.
func (*TextClassRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// Classification messages return a class name and corresponding score
type Classification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	ClassName string `protobuf:"bytes,1,opt,name=class_name,json=className,proto3" json:"class_name,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Score         float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Classification) Reset() {
	*x = Classification{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Classification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classification) ProtoMessage() {}

func (x *Classification) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classification.ProtoReflect.Descriptor instead.
func (*Classification) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{6}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *Classification) GetClassName() string {
	if x != nil {
		return x.ClassName
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *Classification) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

// Span of a particular result
type Span struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Start uint32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	End           uint32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Span) Reset() {
	*x = Span{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Span) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Span) ProtoMessage() {}

func (x *Span) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Span.ProtoReflect.Descriptor instead.
func (*Span) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{7}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *Span) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *Span) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

// ClassificationResults contain zero or more Classification messages
// If the number of Classifications is > 1, top_n > 1 must have been
// specified.
type ClassificationResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Labels        []*Classification `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClassificationResult) Reset() {
	*x = ClassificationResult{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClassificationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassificationResult) ProtoMessage() {}

func (x *ClassificationResult) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassificationResult.ProtoReflect.Descriptor instead.
func (*ClassificationResult) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{8}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *ClassificationResult) GetLabels() []*Classification {
	if x != nil {
		return x.Labels
	}
	return nil
}

// TextClassResponse is the return message from the ClassifyText service.
type TextClassResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Results []*ClassificationResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The ID associated with the request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextClassResponse) Reset() {
	*x = TextClassResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextClassResponse) ProtoMessage() {}

func (x *TextClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextClassResponse.ProtoReflect.Descriptor instead.
func (*TextClassResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{9}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassResponse) GetResults() []*ClassificationResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TextClassResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// TokenClassRequest is the input message to the ClassifyText service.
type TokenClassRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Each repeated text element is handled independently for handling multiple
	// input strings with a single request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Text []string `protobuf:"bytes,1,rep,name=text,proto3" json:"text,omitempty"`
	// Return the top N classification results for each input. 0 or 1 will return
	// top class, otherwise N.
	// Note: Current disabled.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	TopN uint32 `protobuf:"varint,3,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Model *NLPModelParams `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenClassRequest) Reset() {
	*x = TokenClassRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassRequest) ProtoMessage() {}

func (x *TokenClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassRequest.ProtoReflect.Descriptor instead.
func (*TokenClassRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{10}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassRequest) GetText() []string {
	if x != nil {
		return x.Text
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassRequest) GetModel() *NLPModelParams {
	if x != nil {
		return x.Model
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// TokenClassValue is used to correlate an input token with its classification
// results
type TokenClassValue struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Label []*Classification `protobuf:"bytes,2,rep,name=label,proto3" json:"label,omitempty"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Span          []*Span `protobuf:"bytes,3,rep,name=span,proto3" json:"span,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenClassValue) Reset() {
	*x = TokenClassValue{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenClassValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassValue) ProtoMessage() {}

func (x *TokenClassValue) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassValue.ProtoReflect.Descriptor instead.
func (*TokenClassValue) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{11}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassValue) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassValue) GetLabel() []*Classification {
	if x != nil {
		return x.Label
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassValue) GetSpan() []*Span {
	if x != nil {
		return x.Span
	}
	return nil
}

// TokenClassSequence is used for returning a sequence of TokenClassValue
// objects in the original order of input tokens
type TokenClassSequence struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Results       []*TokenClassValue `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenClassSequence) Reset() {
	*x = TokenClassSequence{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenClassSequence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassSequence) ProtoMessage() {}

func (x *TokenClassSequence) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassSequence.ProtoReflect.Descriptor instead.
func (*TokenClassSequence) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{12}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassSequence) GetResults() []*TokenClassValue {
	if x != nil {
		return x.Results
	}
	return nil
}

// TokenClassResponse returns a single TokenClassSequence per input request
type TokenClassResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Results []*TokenClassSequence `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The ID associated with the request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenClassResponse) Reset() {
	*x = TokenClassResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenClassResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenClassResponse) ProtoMessage() {}

func (x *TokenClassResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenClassResponse.ProtoReflect.Descriptor instead.
func (*TokenClassResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{13}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassResponse) GetResults() []*TokenClassSequence {
	if x != nil {
		return x.Results
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *TokenClassResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// AnalyzeIntentContext is reserved for future use when we may send context back
// in a a variety of different formats (including raw neural network hidden
// states)
type AnalyzeIntentContext struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeIntentContext) Reset() {
	*x = AnalyzeIntentContext{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeIntentContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentContext) ProtoMessage() {}

func (x *AnalyzeIntentContext) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentContext.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentContext) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{14}
}

// AnalyzeIntentOptions is an optional configuration message to be sent as part
// of an AnalyzeIntentRequest with query metadata
type AnalyzeIntentOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optionally provide context from previous interactions to bias the model's
	// prediction
	//
	// Types that are valid to be assigned to Context:
	//
	//	*AnalyzeIntentOptions_PreviousIntent
	//	*AnalyzeIntentOptions_Vectors
	Context isAnalyzeIntentOptions_Context `protobuf_oneof:"context"`
	// Optional domain field. Domain must be supported otherwise an error will be
	// returned. If left blank, a domain detector will be run first and then the
	// query routed to the appropriate intent classifier (if it exists)
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Domain string `protobuf:"bytes,3,opt,name=domain,proto3" json:"domain,omitempty"`
	// Optional language field. Assumed to be "en-US" if not specified.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Lang          string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeIntentOptions) Reset() {
	*x = AnalyzeIntentOptions{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeIntentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentOptions) ProtoMessage() {}

func (x *AnalyzeIntentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentOptions.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentOptions) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{15}
}

func (x *AnalyzeIntentOptions) GetContext() isAnalyzeIntentOptions_Context {
	if x != nil {
		return x.Context
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentOptions) GetPreviousIntent() string {
	if x != nil {
		if x, ok := x.Context.(*AnalyzeIntentOptions_PreviousIntent); ok {
			return x.PreviousIntent
		}
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentOptions) GetVectors() *AnalyzeIntentContext {
	if x != nil {
		if x, ok := x.Context.(*AnalyzeIntentOptions_Vectors); ok {
			return x.Vectors
		}
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentOptions) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentOptions) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type isAnalyzeIntentOptions_Context interface {
	isAnalyzeIntentOptions_Context()
}

type AnalyzeIntentOptions_PreviousIntent struct {
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	PreviousIntent string `protobuf:"bytes,1,opt,name=previous_intent,json=previousIntent,proto3,oneof"`
}

type AnalyzeIntentOptions_Vectors struct {
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Vectors *AnalyzeIntentContext `protobuf:"bytes,2,opt,name=vectors,proto3,oneof"`
}

func (*AnalyzeIntentOptions_PreviousIntent) isAnalyzeIntentOptions_Context() {}

func (*AnalyzeIntentOptions_Vectors) isAnalyzeIntentOptions_Context() {}

// AnalyzeIntentRequest is the input message for the AnalyzeIntent service
type AnalyzeIntentRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The string to analyze for intent and slots
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional configuration for the request, including providing context from
	// previous turns and hardcoding a domain/language
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Options *AnalyzeIntentOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeIntentRequest) Reset() {
	*x = AnalyzeIntentRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentRequest) ProtoMessage() {}

func (x *AnalyzeIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{16}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentRequest) GetOptions() *AnalyzeIntentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// AnalyzeIntentResponse is returned by the AnalyzeIntent service, and includes
// information related to the query's intent, (optionally) slot data, and its
// domain.
type AnalyzeIntentResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Intent classification result, including the label and score
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Intent *Classification `protobuf:"bytes,1,opt,name=intent,proto3" json:"intent,omitempty"`
	// List of tokens explicitly marked as filling a slot relevant to the intent,
	// where the tokens may not exactly match the input (based on the recombined
	// values after tokenization)
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Slots []*TokenClassValue `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"`
	// Returns the inferred domain for the query if not hardcoded in the request.
	// In the case where the domain was hardcoded in AnalyzeIntentRequest, the
	// returned domain is an exact match to the request. In the case where no
	// domain matches the query, intent and slots will be unset.
	//
	// DEPRECATED, use Classification domain field.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	DomainStr string `protobuf:"bytes,3,opt,name=domain_str,json=domainStr,proto3" json:"domain_str,omitempty"`
	// Returns the inferred domain for the query if not hardcoded in the request.
	// In the case where the domain was hardcoded in AnalyzeIntentRequest, the
	// returned domain is an exact match to the request. In the case where no
	// domain matches the query, intent and slots will be unset.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Domain *Classification `protobuf:"bytes,4,opt,name=domain,proto3" json:"domain,omitempty"`
	// The ID associated with the request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeIntentResponse) Reset() {
	*x = AnalyzeIntentResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeIntentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeIntentResponse) ProtoMessage() {}

func (x *AnalyzeIntentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeIntentResponse.ProtoReflect.Descriptor instead.
func (*AnalyzeIntentResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{17}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentResponse) GetIntent() *Classification {
	if x != nil {
		return x.Intent
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentResponse) GetSlots() []*TokenClassValue {
	if x != nil {
		return x.Slots
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentResponse) GetDomainStr() string {
	if x != nil {
		return x.DomainStr
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentResponse) GetDomain() *Classification {
	if x != nil {
		return x.Domain
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeIntentResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// AnalyzeEntitiesOptions is an optional configuration message to be sent as
// part of an AnalyzeEntitiesRequest with query metadata
type AnalyzeEntitiesOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Optional language field. Assumed to be "en-US" if not specified.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Lang          string `protobuf:"bytes,4,opt,name=lang,proto3" json:"lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeEntitiesOptions) Reset() {
	*x = AnalyzeEntitiesOptions{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeEntitiesOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeEntitiesOptions) ProtoMessage() {}

func (x *AnalyzeEntitiesOptions) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeEntitiesOptions.ProtoReflect.Descriptor instead.
func (*AnalyzeEntitiesOptions) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{18}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeEntitiesOptions) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

// AnalyzeEntitiesRequest is the input message for the AnalyzeEntities service
type AnalyzeEntitiesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The string to analyze for intent and slots
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Optional configuration for the request, including providing context from
	// previous turns and hardcoding a domain/language
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Options *AnalyzeEntitiesOptions `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnalyzeEntitiesRequest) Reset() {
	*x = AnalyzeEntitiesRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnalyzeEntitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnalyzeEntitiesRequest) ProtoMessage() {}

func (x *AnalyzeEntitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnalyzeEntitiesRequest.ProtoReflect.Descriptor instead.
func (*AnalyzeEntitiesRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{19}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeEntitiesRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeEntitiesRequest) GetOptions() *AnalyzeEntitiesOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *AnalyzeEntitiesRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type NaturalQueryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The natural language query
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// Maximum number of answers to return for the query. Defaults to 1 if not
	// set.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	TopN uint32 `protobuf:"varint,2,opt,name=top_n,json=topN,proto3" json:"top_n,omitempty"`
	// Context to search with the above query
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Context string `protobuf:"bytes,3,opt,name=context,proto3" json:"context,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NaturalQueryRequest) Reset() {
	*x = NaturalQueryRequest{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryRequest) ProtoMessage() {}

func (x *NaturalQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryRequest.ProtoReflect.Descriptor instead.
func (*NaturalQueryRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{20}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryRequest) GetTopN() uint32 {
	if x != nil {
		return x.TopN
	}
	return 0
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type NaturalQueryResult struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// text which answers the query
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Answer string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	// Score representing confidence in result
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Score         float32 `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NaturalQueryResult) Reset() {
	*x = NaturalQueryResult{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryResult) ProtoMessage() {}

func (x *NaturalQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryResult.ProtoReflect.Descriptor instead.
func (*NaturalQueryResult) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{21}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryResult) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

type NaturalQueryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Results []*NaturalQueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The ID associated with the request
	//
	// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NaturalQueryResponse) Reset() {
	*x = NaturalQueryResponse{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NaturalQueryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NaturalQueryResponse) ProtoMessage() {}

func (x *NaturalQueryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NaturalQueryResponse.ProtoReflect.Descriptor instead.
func (*NaturalQueryResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{22}
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryResponse) GetResults() []*NaturalQueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// Deprecated: Marked as deprecated in riva/proto/riva_nlp.proto.
func (x *NaturalQueryResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type RivaNLPConfigResponse_Config struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelName     string                 `protobuf:"bytes,1,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	Parameters    map[string]string      `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RivaNLPConfigResponse_Config) Reset() {
	*x = RivaNLPConfigResponse_Config{}
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RivaNLPConfigResponse_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RivaNLPConfigResponse_Config) ProtoMessage() {}

func (x *RivaNLPConfigResponse_Config) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nlp_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RivaNLPConfigResponse_Config.ProtoReflect.Descriptor instead.
func (*RivaNLPConfigResponse_Config) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nlp_proto_rawDescGZIP(), []int{1, 0}
}

func (x *RivaNLPConfigResponse_Config) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *RivaNLPConfigResponse_Config) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

var File_riva_proto_riva_nlp_proto protoreflect.FileDescriptor

var file_riva_proto_riva_nlp_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76,
	0x61, 0x5f, 0x6e, 0x6c, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x1a, 0x1c, 0x72, 0x69,
	0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x14, 0x52, 0x69,
	0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0xb1, 0x02, 0x0a, 0x15, 0x52, 0x69, 0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xc5, 0x01,
	0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x52, 0x69,
	0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x54, 0x0a, 0x0e, 0x4e, 0x4c, 0x50, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9e, 0x01, 0x0a, 0x14,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x35, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e,
	0x4c, 0x50, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x15,
	0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xaa, 0x01, 0x0a, 0x10, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x17,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x4c, 0x50, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d,
	0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x21, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x36, 0x0a,
	0x04, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x18, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x14, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x53, 0x0a, 0x14, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3b, 0x0a,
	0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x54,
	0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x43, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xab, 0x01, 0x0a, 0x11, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x17, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x4e, 0x12, 0x39, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x4c, 0x50, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x95, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x39, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x70, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x53, 0x70, 0x61, 0x6e, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x04, 0x73, 0x70, 0x61, 0x6e, 0x22, 0x54, 0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x22, 0x83, 0x01,
	0x0a, 0x12, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x14,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x42, 0x02, 0x18, 0x01, 0x48,
	0x00, 0x52, 0x07, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x06, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x42, 0x09,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xa1, 0x01, 0x0a, 0x14, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x43, 0x0a, 0x07,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x9c, 0x02,
	0x0a, 0x15, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0a, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x09, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x72, 0x12, 0x3b, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76,
	0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x16,
	0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0xa5,
	0x01, 0x0a, 0x16, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02,
	0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x13, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18,
	0x01, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x02, 0x18, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70,
	0x4e, 0x12, 0x1c, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4a, 0x0a, 0x12, 0x4e,
	0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x1a, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x4e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x41, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01, 0x52, 0x02, 0x69, 0x64, 0x32,
	0xad, 0x06, 0x0a, 0x19, 0x52, 0x69, 0x76, 0x61, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x55, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a,
	0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x65, 0x78, 0x74, 0x12, 0x21, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e,
	0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e,
	0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x5e, 0x0a, 0x0e, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c,
	0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x0f, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02,
	0x01, 0x12, 0x63, 0x0a, 0x0d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x60, 0x0a, 0x0d, 0x50, 0x75, 0x6e, 0x63, 0x74, 0x75,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12, 0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x54, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0c, 0x4e, 0x61, 0x74, 0x75,
	0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x24, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72,
	0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x61, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x03, 0x88, 0x02, 0x01, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65,
	0x74, 0x52, 0x69, 0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70,
	0x2e, 0x52, 0x69, 0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6c, 0x70, 0x2e, 0x52, 0x69, 0x76, 0x61, 0x4e, 0x4c, 0x50, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x1b, 0x5a, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x72, 0x69,
	0x76, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_riva_proto_riva_nlp_proto_rawDescOnce sync.Once
	file_riva_proto_riva_nlp_proto_rawDescData []byte
)

func file_riva_proto_riva_nlp_proto_rawDescGZIP() []byte {
	file_riva_proto_riva_nlp_proto_rawDescOnce.Do(func() {
		file_riva_proto_riva_nlp_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_riva_proto_riva_nlp_proto_rawDesc), len(file_riva_proto_riva_nlp_proto_rawDesc)))
	})
	return file_riva_proto_riva_nlp_proto_rawDescData
}

var file_riva_proto_riva_nlp_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_riva_proto_riva_nlp_proto_goTypes = []any{
	(*RivaNLPConfigRequest)(nil),         // 0: nvidia.riva.nlp.RivaNLPConfigRequest
	(*RivaNLPConfigResponse)(nil),        // 1: nvidia.riva.nlp.RivaNLPConfigResponse
	(*NLPModelParams)(nil),               // 2: nvidia.riva.nlp.NLPModelParams
	(*TextTransformRequest)(nil),         // 3: nvidia.riva.nlp.TextTransformRequest
	(*TextTransformResponse)(nil),        // 4: nvidia.riva.nlp.TextTransformResponse
	(*TextClassRequest)(nil),             // 5: nvidia.riva.nlp.TextClassRequest
	(*Classification)(nil),               // 6: nvidia.riva.nlp.Classification
	(*Span)(nil),                         // 7: nvidia.riva.nlp.Span
	(*ClassificationResult)(nil),         // 8: nvidia.riva.nlp.ClassificationResult
	(*TextClassResponse)(nil),            // 9: nvidia.riva.nlp.TextClassResponse
	(*TokenClassRequest)(nil),            // 10: nvidia.riva.nlp.TokenClassRequest
	(*TokenClassValue)(nil),              // 11: nvidia.riva.nlp.TokenClassValue
	(*TokenClassSequence)(nil),           // 12: nvidia.riva.nlp.TokenClassSequence
	(*TokenClassResponse)(nil),           // 13: nvidia.riva.nlp.TokenClassResponse
	(*AnalyzeIntentContext)(nil),         // 14: nvidia.riva.nlp.AnalyzeIntentContext
	(*AnalyzeIntentOptions)(nil),         // 15: nvidia.riva.nlp.AnalyzeIntentOptions
	(*AnalyzeIntentRequest)(nil),         // 16: nvidia.riva.nlp.AnalyzeIntentRequest
	(*AnalyzeIntentResponse)(nil),        // 17: nvidia.riva.nlp.AnalyzeIntentResponse
	(*AnalyzeEntitiesOptions)(nil),       // 18: nvidia.riva.nlp.AnalyzeEntitiesOptions
	(*AnalyzeEntitiesRequest)(nil),       // 19: nvidia.riva.nlp.AnalyzeEntitiesRequest
	(*NaturalQueryRequest)(nil),          // 20: nvidia.riva.nlp.NaturalQueryRequest
	(*NaturalQueryResult)(nil),           // 21: nvidia.riva.nlp.NaturalQueryResult
	(*NaturalQueryResponse)(nil),         // 22: nvidia.riva.nlp.NaturalQueryResponse
	(*RivaNLPConfigResponse_Config)(nil), // 23: nvidia.riva.nlp.RivaNLPConfigResponse.Config
	nil,                                  // 24: nvidia.riva.nlp.RivaNLPConfigResponse.Config.ParametersEntry
	(*RequestId)(nil),                    // 25: nvidia.riva.RequestId
}
var file_riva_proto_riva_nlp_proto_depIdxs = []int32{
	23, // 0: nvidia.riva.nlp.RivaNLPConfigResponse.model_config:type_name -> nvidia.riva.nlp.RivaNLPConfigResponse.Config
	2,  // 1: nvidia.riva.nlp.TextTransformRequest.model:type_name -> nvidia.riva.nlp.NLPModelParams
	25, // 2: nvidia.riva.nlp.TextTransformRequest.id:type_name -> nvidia.riva.RequestId
	25, // 3: nvidia.riva.nlp.TextTransformResponse.id:type_name -> nvidia.riva.RequestId
	2,  // 4: nvidia.riva.nlp.TextClassRequest.model:type_name -> nvidia.riva.nlp.NLPModelParams
	25, // 5: nvidia.riva.nlp.TextClassRequest.id:type_name -> nvidia.riva.RequestId
	6,  // 6: nvidia.riva.nlp.ClassificationResult.labels:type_name -> nvidia.riva.nlp.Classification
	8,  // 7: nvidia.riva.nlp.TextClassResponse.results:type_name -> nvidia.riva.nlp.ClassificationResult
	25, // 8: nvidia.riva.nlp.TextClassResponse.id:type_name -> nvidia.riva.RequestId
	2,  // 9: nvidia.riva.nlp.TokenClassRequest.model:type_name -> nvidia.riva.nlp.NLPModelParams
	25, // 10: nvidia.riva.nlp.TokenClassRequest.id:type_name -> nvidia.riva.RequestId
	6,  // 11: nvidia.riva.nlp.TokenClassValue.label:type_name -> nvidia.riva.nlp.Classification
	7,  // 12: nvidia.riva.nlp.TokenClassValue.span:type_name -> nvidia.riva.nlp.Span
	11, // 13: nvidia.riva.nlp.TokenClassSequence.results:type_name -> nvidia.riva.nlp.TokenClassValue
	12, // 14: nvidia.riva.nlp.TokenClassResponse.results:type_name -> nvidia.riva.nlp.TokenClassSequence
	25, // 15: nvidia.riva.nlp.TokenClassResponse.id:type_name -> nvidia.riva.RequestId
	14, // 16: nvidia.riva.nlp.AnalyzeIntentOptions.vectors:type_name -> nvidia.riva.nlp.AnalyzeIntentContext
	15, // 17: nvidia.riva.nlp.AnalyzeIntentRequest.options:type_name -> nvidia.riva.nlp.AnalyzeIntentOptions
	25, // 18: nvidia.riva.nlp.AnalyzeIntentRequest.id:type_name -> nvidia.riva.RequestId
	6,  // 19: nvidia.riva.nlp.AnalyzeIntentResponse.intent:type_name -> nvidia.riva.nlp.Classification
	11, // 20: nvidia.riva.nlp.AnalyzeIntentResponse.slots:type_name -> nvidia.riva.nlp.TokenClassValue
	6,  // 21: nvidia.riva.nlp.AnalyzeIntentResponse.domain:type_name -> nvidia.riva.nlp.Classification
	25, // 22: nvidia.riva.nlp.AnalyzeIntentResponse.id:type_name -> nvidia.riva.RequestId
	18, // 23: nvidia.riva.nlp.AnalyzeEntitiesRequest.options:type_name -> nvidia.riva.nlp.AnalyzeEntitiesOptions
	25, // 24: nvidia.riva.nlp.AnalyzeEntitiesRequest.id:type_name -> nvidia.riva.RequestId
	25, // 25: nvidia.riva.nlp.NaturalQueryRequest.id:type_name -> nvidia.riva.RequestId
	21, // 26: nvidia.riva.nlp.NaturalQueryResponse.results:type_name -> nvidia.riva.nlp.NaturalQueryResult
	25, // 27: nvidia.riva.nlp.NaturalQueryResponse.id:type_name -> nvidia.riva.RequestId
	24, // 28: nvidia.riva.nlp.RivaNLPConfigResponse.Config.parameters:type_name -> nvidia.riva.nlp.RivaNLPConfigResponse.Config.ParametersEntry
	5,  // 29: nvidia.riva.nlp.RivaLanguageUnderstanding.ClassifyText:input_type -> nvidia.riva.nlp.TextClassRequest
	10, // 30: nvidia.riva.nlp.RivaLanguageUnderstanding.ClassifyTokens:input_type -> nvidia.riva.nlp.TokenClassRequest
	3,  // 31: nvidia.riva.nlp.RivaLanguageUnderstanding.TransformText:input_type -> nvidia.riva.nlp.TextTransformRequest
	19, // 32: nvidia.riva.nlp.RivaLanguageUnderstanding.AnalyzeEntities:input_type -> nvidia.riva.nlp.AnalyzeEntitiesRequest
	16, // 33: nvidia.riva.nlp.RivaLanguageUnderstanding.AnalyzeIntent:input_type -> nvidia.riva.nlp.AnalyzeIntentRequest
	3,  // 34: nvidia.riva.nlp.RivaLanguageUnderstanding.PunctuateText:input_type -> nvidia.riva.nlp.TextTransformRequest
	20, // 35: nvidia.riva.nlp.RivaLanguageUnderstanding.NaturalQuery:input_type -> nvidia.riva.nlp.NaturalQueryRequest
	0,  // 36: nvidia.riva.nlp.RivaLanguageUnderstanding.GetRivaNLPConfig:input_type -> nvidia.riva.nlp.RivaNLPConfigRequest
	9,  // 37: nvidia.riva.nlp.RivaLanguageUnderstanding.ClassifyText:output_type -> nvidia.riva.nlp.TextClassResponse
	13, // 38: nvidia.riva.nlp.RivaLanguageUnderstanding.ClassifyTokens:output_type -> nvidia.riva.nlp.TokenClassResponse
	4,  // 39: nvidia.riva.nlp.RivaLanguageUnderstanding.TransformText:output_type -> nvidia.riva.nlp.TextTransformResponse
	13, // 40: nvidia.riva.nlp.RivaLanguageUnderstanding.AnalyzeEntities:output_type -> nvidia.riva.nlp.TokenClassResponse
	17, // 41: nvidia.riva.nlp.RivaLanguageUnderstanding.AnalyzeIntent:output_type -> nvidia.riva.nlp.AnalyzeIntentResponse
	4,  // 42: nvidia.riva.nlp.RivaLanguageUnderstanding.PunctuateText:output_type -> nvidia.riva.nlp.TextTransformResponse
	22, // 43: nvidia.riva.nlp.RivaLanguageUnderstanding.NaturalQuery:output_type -> nvidia.riva.nlp.NaturalQueryResponse
	1,  // 44: nvidia.riva.nlp.RivaLanguageUnderstanding.GetRivaNLPConfig:output_type -> nvidia.riva.nlp.RivaNLPConfigResponse
	37, // [37:45] is the sub-list for method output_type
	29, // [29:37] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_riva_proto_riva_nlp_proto_init() }
func file_riva_proto_riva_nlp_proto_init() {
	if File_riva_proto_riva_nlp_proto != nil {
		return
	}
	file_riva_proto_riva_common_proto_init()
	file_riva_proto_riva_nlp_proto_msgTypes[15].OneofWrappers = []any{
		(*AnalyzeIntentOptions_PreviousIntent)(nil),
		(*AnalyzeIntentOptions_Vectors)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_riva_proto_riva_nlp_proto_rawDesc), len(file_riva_proto_riva_nlp_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_riva_proto_riva_nlp_proto_goTypes,
		DependencyIndexes: file_riva_proto_riva_nlp_proto_depIdxs,
		MessageInfos:      file_riva_proto_riva_nlp_proto_msgTypes,
	}.Build()
	File_riva_proto_riva_nlp_proto = out.File
	file_riva_proto_riva_nlp_proto_goTypes = nil
	file_riva_proto_riva_nlp_proto_depIdxs = nil
}
