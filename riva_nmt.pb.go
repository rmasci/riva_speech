// Copyright (c) 2022, NVIDIA CORPORATION.  All rights reserved.
//
// NVIDIA CORPORATION and its licensors retain all intellectual property
// and proprietary rights in and to this software, related documentation
// and any modifications thereto.  Any use, reproduction, disclosure or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA CORPORATION is strictly prohibited.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: riva/proto/riva_nmt.proto

package riva_speech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Configuration for Translate S2S.  reuse existing protos from other services.
type StreamingTranslateSpeechToSpeechConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// From riva_asr.proto
	AsrConfig         *StreamingRecognitionConfig `protobuf:"bytes,1,opt,name=asr_config,json=asrConfig,proto3" json:"asr_config,omitempty"`
	TtsConfig         *SynthesizeSpeechConfig     `protobuf:"bytes,2,opt,name=tts_config,json=ttsConfig,proto3" json:"tts_config,omitempty"`
	TranslationConfig *TranslationConfig          `protobuf:"bytes,3,opt,name=translation_config,json=translationConfig,proto3" json:"translation_config,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToSpeechConfig) Reset() {
	*x = StreamingTranslateSpeechToSpeechConfig{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToSpeechConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToSpeechConfig) ProtoMessage() {}

func (x *StreamingTranslateSpeechToSpeechConfig) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToSpeechConfig.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToSpeechConfig) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{0}
}

func (x *StreamingTranslateSpeechToSpeechConfig) GetAsrConfig() *StreamingRecognitionConfig {
	if x != nil {
		return x.AsrConfig
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechConfig) GetTtsConfig() *SynthesizeSpeechConfig {
	if x != nil {
		return x.TtsConfig
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechConfig) GetTranslationConfig() *TranslationConfig {
	if x != nil {
		return x.TranslationConfig
	}
	return nil
}

// Streaming translate speech to speech used to configure the entire pipline for
// speech translation.  This can be be backed by a cascade of ASR, NMT, TTS
// models or an end to end model
type StreamingTranslateSpeechToSpeechRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to StreamingRequest:
	//
	//	*StreamingTranslateSpeechToSpeechRequest_Config
	//	*StreamingTranslateSpeechToSpeechRequest_AudioContent
	StreamingRequest isStreamingTranslateSpeechToSpeechRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToSpeechRequest) Reset() {
	*x = StreamingTranslateSpeechToSpeechRequest{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToSpeechRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToSpeechRequest) ProtoMessage() {}

func (x *StreamingTranslateSpeechToSpeechRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToSpeechRequest.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToSpeechRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{1}
}

func (x *StreamingTranslateSpeechToSpeechRequest) GetStreamingRequest() isStreamingTranslateSpeechToSpeechRequest_StreamingRequest {
	if x != nil {
		return x.StreamingRequest
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechRequest) GetConfig() *StreamingTranslateSpeechToSpeechConfig {
	if x != nil {
		if x, ok := x.StreamingRequest.(*StreamingTranslateSpeechToSpeechRequest_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechRequest) GetAudioContent() []byte {
	if x != nil {
		if x, ok := x.StreamingRequest.(*StreamingTranslateSpeechToSpeechRequest_AudioContent); ok {
			return x.AudioContent
		}
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type isStreamingTranslateSpeechToSpeechRequest_StreamingRequest interface {
	isStreamingTranslateSpeechToSpeechRequest_StreamingRequest()
}

type StreamingTranslateSpeechToSpeechRequest_Config struct {
	Config *StreamingTranslateSpeechToSpeechConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingTranslateSpeechToSpeechRequest_AudioContent struct {
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingTranslateSpeechToSpeechRequest_Config) isStreamingTranslateSpeechToSpeechRequest_StreamingRequest() {
}

func (*StreamingTranslateSpeechToSpeechRequest_AudioContent) isStreamingTranslateSpeechToSpeechRequest_StreamingRequest() {
}

type TranslationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// BCP-47 "en-US"
	SourceLanguageCode string `protobuf:"bytes,1,opt,name=source_language_code,json=sourceLanguageCode,proto3" json:"source_language_code,omitempty"`
	TargetLanguageCode string `protobuf:"bytes,2,opt,name=target_language_code,json=targetLanguageCode,proto3" json:"target_language_code,omitempty"`
	ModelName          string `protobuf:"bytes,3,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
	// A list of words or phrases that will not be translated by the
	// pipeline. This list can include special words or phrases, for example,
	// names, acronyms or any phrases desired to be excluded from translation.
	// These words or phrases will be present as-is in the translated output.
	DntPhrases    []string `protobuf:"bytes,4,rep,name=dnt_phrases,json=dntPhrases,proto3" json:"dnt_phrases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranslationConfig) Reset() {
	*x = TranslationConfig{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslationConfig) ProtoMessage() {}

func (x *TranslationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslationConfig.ProtoReflect.Descriptor instead.
func (*TranslationConfig) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{2}
}

func (x *TranslationConfig) GetSourceLanguageCode() string {
	if x != nil {
		return x.SourceLanguageCode
	}
	return ""
}

func (x *TranslationConfig) GetTargetLanguageCode() string {
	if x != nil {
		return x.TargetLanguageCode
	}
	return ""
}

func (x *TranslationConfig) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

func (x *TranslationConfig) GetDntPhrases() []string {
	if x != nil {
		return x.DntPhrases
	}
	return nil
}

type SynthesizeSpeechConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encoding      AudioEncoding          `protobuf:"varint,1,opt,name=encoding,proto3,enum=nvidia.riva.AudioEncoding" json:"encoding,omitempty"`
	SampleRateHz  int32                  `protobuf:"varint,2,opt,name=sample_rate_hz,json=sampleRateHz,proto3" json:"sample_rate_hz,omitempty"`
	VoiceName     string                 `protobuf:"bytes,3,opt,name=voice_name,json=voiceName,proto3" json:"voice_name,omitempty"`
	LanguageCode  string                 `protobuf:"bytes,4,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	ProsodyRate   string                 `protobuf:"bytes,5,opt,name=prosody_rate,json=prosodyRate,proto3" json:"prosody_rate,omitempty"`
	ProsodyPitch  string                 `protobuf:"bytes,6,opt,name=prosody_pitch,json=prosodyPitch,proto3" json:"prosody_pitch,omitempty"`
	ProsodyVolume string                 `protobuf:"bytes,7,opt,name=prosody_volume,json=prosodyVolume,proto3" json:"prosody_volume,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SynthesizeSpeechConfig) Reset() {
	*x = SynthesizeSpeechConfig{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SynthesizeSpeechConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SynthesizeSpeechConfig) ProtoMessage() {}

func (x *SynthesizeSpeechConfig) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SynthesizeSpeechConfig.ProtoReflect.Descriptor instead.
func (*SynthesizeSpeechConfig) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{3}
}

func (x *SynthesizeSpeechConfig) GetEncoding() AudioEncoding {
	if x != nil {
		return x.Encoding
	}
	return AudioEncoding_ENCODING_UNSPECIFIED
}

func (x *SynthesizeSpeechConfig) GetSampleRateHz() int32 {
	if x != nil {
		return x.SampleRateHz
	}
	return 0
}

func (x *SynthesizeSpeechConfig) GetVoiceName() string {
	if x != nil {
		return x.VoiceName
	}
	return ""
}

func (x *SynthesizeSpeechConfig) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *SynthesizeSpeechConfig) GetProsodyRate() string {
	if x != nil {
		return x.ProsodyRate
	}
	return ""
}

func (x *SynthesizeSpeechConfig) GetProsodyPitch() string {
	if x != nil {
		return x.ProsodyPitch
	}
	return ""
}

func (x *SynthesizeSpeechConfig) GetProsodyVolume() string {
	if x != nil {
		return x.ProsodyVolume
	}
	return ""
}

type StreamingTranslateSpeechToSpeechResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contains speech responses, the last response sends an empty buffer to mark
	// the end of stream.
	Speech *SynthesizeSpeechResponse `protobuf:"bytes,1,opt,name=speech,proto3" json:"speech,omitempty"` // from riva_tts.proto
	// The ID associated with the request
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToSpeechResponse) Reset() {
	*x = StreamingTranslateSpeechToSpeechResponse{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToSpeechResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToSpeechResponse) ProtoMessage() {}

func (x *StreamingTranslateSpeechToSpeechResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToSpeechResponse.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToSpeechResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingTranslateSpeechToSpeechResponse) GetSpeech() *SynthesizeSpeechResponse {
	if x != nil {
		return x.Speech
	}
	return nil
}

func (x *StreamingTranslateSpeechToSpeechResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type StreamingTranslateSpeechToTextRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to StreamingRequest:
	//
	//	*StreamingTranslateSpeechToTextRequest_Config
	//	*StreamingTranslateSpeechToTextRequest_AudioContent
	StreamingRequest isStreamingTranslateSpeechToTextRequest_StreamingRequest `protobuf_oneof:"streaming_request"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToTextRequest) Reset() {
	*x = StreamingTranslateSpeechToTextRequest{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToTextRequest) ProtoMessage() {}

func (x *StreamingTranslateSpeechToTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToTextRequest.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToTextRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingTranslateSpeechToTextRequest) GetStreamingRequest() isStreamingTranslateSpeechToTextRequest_StreamingRequest {
	if x != nil {
		return x.StreamingRequest
	}
	return nil
}

func (x *StreamingTranslateSpeechToTextRequest) GetConfig() *StreamingTranslateSpeechToTextConfig {
	if x != nil {
		if x, ok := x.StreamingRequest.(*StreamingTranslateSpeechToTextRequest_Config); ok {
			return x.Config
		}
	}
	return nil
}

func (x *StreamingTranslateSpeechToTextRequest) GetAudioContent() []byte {
	if x != nil {
		if x, ok := x.StreamingRequest.(*StreamingTranslateSpeechToTextRequest_AudioContent); ok {
			return x.AudioContent
		}
	}
	return nil
}

func (x *StreamingTranslateSpeechToTextRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type isStreamingTranslateSpeechToTextRequest_StreamingRequest interface {
	isStreamingTranslateSpeechToTextRequest_StreamingRequest()
}

type StreamingTranslateSpeechToTextRequest_Config struct {
	Config *StreamingTranslateSpeechToTextConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingTranslateSpeechToTextRequest_AudioContent struct {
	AudioContent []byte `protobuf:"bytes,2,opt,name=audio_content,json=audioContent,proto3,oneof"`
}

func (*StreamingTranslateSpeechToTextRequest_Config) isStreamingTranslateSpeechToTextRequest_StreamingRequest() {
}

func (*StreamingTranslateSpeechToTextRequest_AudioContent) isStreamingTranslateSpeechToTextRequest_StreamingRequest() {
}

type StreamingTranslateSpeechToTextResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// from riva_asr.proto
	Results []*StreamingRecognitionResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
	// The ID associated with the request
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToTextResponse) Reset() {
	*x = StreamingTranslateSpeechToTextResponse{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToTextResponse) ProtoMessage() {}

func (x *StreamingTranslateSpeechToTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToTextResponse.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToTextResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{6}
}

func (x *StreamingTranslateSpeechToTextResponse) GetResults() []*StreamingRecognitionResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *StreamingTranslateSpeechToTextResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

type StreamingTranslateSpeechToTextConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// existing ASR config
	AsrConfig         *StreamingRecognitionConfig `protobuf:"bytes,1,opt,name=asr_config,json=asrConfig,proto3" json:"asr_config,omitempty"`
	TranslationConfig *TranslationConfig          `protobuf:"bytes,2,opt,name=translation_config,json=translationConfig,proto3" json:"translation_config,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *StreamingTranslateSpeechToTextConfig) Reset() {
	*x = StreamingTranslateSpeechToTextConfig{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingTranslateSpeechToTextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingTranslateSpeechToTextConfig) ProtoMessage() {}

func (x *StreamingTranslateSpeechToTextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingTranslateSpeechToTextConfig.ProtoReflect.Descriptor instead.
func (*StreamingTranslateSpeechToTextConfig) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{7}
}

func (x *StreamingTranslateSpeechToTextConfig) GetAsrConfig() *StreamingRecognitionConfig {
	if x != nil {
		return x.AsrConfig
	}
	return nil
}

func (x *StreamingTranslateSpeechToTextConfig) GetTranslationConfig() *TranslationConfig {
	if x != nil {
		return x.TranslationConfig
	}
	return nil
}

// request for synchronous translation of each text in texts.
// Available languages can be queried using ListSupportLanguagePairs RPC.
// source and target languages must be specified, are currently two character
// ISO codes, this will likely change to BCP-47 inline with other Riva Services
// for GA.
type TranslateTextRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Texts          []string               `protobuf:"bytes,1,rep,name=texts,proto3" json:"texts,omitempty"`
	Model          string                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	SourceLanguage string                 `protobuf:"bytes,3,opt,name=source_language,json=sourceLanguage,proto3" json:"source_language,omitempty"`
	TargetLanguage string                 `protobuf:"bytes,4,opt,name=target_language,json=targetLanguage,proto3" json:"target_language,omitempty"`
	// A list of words or phrases that are not to be translated or
	// to be custom translated by the pipeline. Words to be custom translated
	// should be specified as "<word>##<custom_translation>" and
	// words not be translated should be specified as "<word>".
	DntPhrases []string `protobuf:"bytes,5,rep,name=dnt_phrases,json=dntPhrases,proto3" json:"dnt_phrases,omitempty"`
	// The ID to be associated with the request. If provided, this will be
	// returned in the corresponding response.
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranslateTextRequest) Reset() {
	*x = TranslateTextRequest{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslateTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateTextRequest) ProtoMessage() {}

func (x *TranslateTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateTextRequest.ProtoReflect.Descriptor instead.
func (*TranslateTextRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{8}
}

func (x *TranslateTextRequest) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

func (x *TranslateTextRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *TranslateTextRequest) GetSourceLanguage() string {
	if x != nil {
		return x.SourceLanguage
	}
	return ""
}

func (x *TranslateTextRequest) GetTargetLanguage() string {
	if x != nil {
		return x.TargetLanguage
	}
	return ""
}

func (x *TranslateTextRequest) GetDntPhrases() []string {
	if x != nil {
		return x.DntPhrases
	}
	return nil
}

func (x *TranslateTextRequest) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// contains a single translation, collecting into the translate text response
// Includes the target language code, since with multi lingual models there are
// multiple possibilities.
type Translation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Language      string                 `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Translation) Reset() {
	*x = Translation{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Translation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Translation) ProtoMessage() {}

func (x *Translation) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Translation.ProtoReflect.Descriptor instead.
func (*Translation) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{9}
}

func (x *Translation) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Translation) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Translations are returned as text:language pairs.  These are 1:1 for the
// passed in 'texts' from the request.
type TranslateTextResponse struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Translations []*Translation         `protobuf:"bytes,1,rep,name=translations,proto3" json:"translations,omitempty"`
	// The ID associated with the request
	Id            *RequestId `protobuf:"bytes,100,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TranslateTextResponse) Reset() {
	*x = TranslateTextResponse{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TranslateTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TranslateTextResponse) ProtoMessage() {}

func (x *TranslateTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TranslateTextResponse.ProtoReflect.Descriptor instead.
func (*TranslateTextResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{10}
}

func (x *TranslateTextResponse) GetTranslations() []*Translation {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *TranslateTextResponse) GetId() *RequestId {
	if x != nil {
		return x.Id
	}
	return nil
}

// Returns a map of model names to its source and target language pairs.
// Can specify a specific model name to retrieve only its language pairs.
type AvailableLanguageRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Supported values: "s2s_model", "s2t_model", and name of the deployed t2t model.
	// If empty, returns all available models and languages.
	Model         string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailableLanguageRequest) Reset() {
	*x = AvailableLanguageRequest{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailableLanguageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLanguageRequest) ProtoMessage() {}

func (x *AvailableLanguageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLanguageRequest.ProtoReflect.Descriptor instead.
func (*AvailableLanguageRequest) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{11}
}

func (x *AvailableLanguageRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

// Language pairs are the sets of src to tgt languages available per model.
// languages contains all the model_name -> Language pair
type AvailableLanguageResponse struct {
	state         protoimpl.MessageState                             `protogen:"open.v1"`
	Languages     map[string]*AvailableLanguageResponse_LanguagePair `protobuf:"bytes,1,rep,name=languages,proto3" json:"languages,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailableLanguageResponse) Reset() {
	*x = AvailableLanguageResponse{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailableLanguageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLanguageResponse) ProtoMessage() {}

func (x *AvailableLanguageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLanguageResponse.ProtoReflect.Descriptor instead.
func (*AvailableLanguageResponse) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{12}
}

func (x *AvailableLanguageResponse) GetLanguages() map[string]*AvailableLanguageResponse_LanguagePair {
	if x != nil {
		return x.Languages
	}
	return nil
}

type AvailableLanguageResponse_LanguagePair struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SrcLang       []string               `protobuf:"bytes,1,rep,name=src_lang,json=srcLang,proto3" json:"src_lang,omitempty"`
	TgtLang       []string               `protobuf:"bytes,2,rep,name=tgt_lang,json=tgtLang,proto3" json:"tgt_lang,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AvailableLanguageResponse_LanguagePair) Reset() {
	*x = AvailableLanguageResponse_LanguagePair{}
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AvailableLanguageResponse_LanguagePair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailableLanguageResponse_LanguagePair) ProtoMessage() {}

func (x *AvailableLanguageResponse_LanguagePair) ProtoReflect() protoreflect.Message {
	mi := &file_riva_proto_riva_nmt_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailableLanguageResponse_LanguagePair.ProtoReflect.Descriptor instead.
func (*AvailableLanguageResponse_LanguagePair) Descriptor() ([]byte, []int) {
	return file_riva_proto_riva_nmt_proto_rawDescGZIP(), []int{12, 0}
}

func (x *AvailableLanguageResponse_LanguagePair) GetSrcLang() []string {
	if x != nil {
		return x.SrcLang
	}
	return nil
}

func (x *AvailableLanguageResponse_LanguagePair) GetTgtLang() []string {
	if x != nil {
		return x.TgtLang
	}
	return nil
}

var File_riva_proto_riva_nmt_proto protoreflect.FileDescriptor

var file_riva_proto_riva_nmt_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76,
	0x61, 0x5f, 0x6e, 0x6d, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x1a, 0x1c, 0x72, 0x69,
	0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x72, 0x69, 0x76, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76, 0x61, 0x5f, 0x61, 0x73, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72,
	0x69, 0x76, 0x61, 0x5f, 0x74, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02,
	0x0a, 0x26, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x73, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x73, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x0a, 0x74, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x09, 0x74, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51, 0x0a, 0x12,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0xe0, 0x01, 0x0a, 0x27, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25,
	0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x42, 0x13, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x30, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x6e, 0x74, 0x5f, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x6e, 0x74, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x22, 0xa9, 0x02, 0x0a,
	0x16, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68,
	0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x48, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x6f, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x73, 0x6f, 0x64, 0x79, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x70, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x5f, 0x70, 0x69, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x50, 0x69, 0x74, 0x63,
	0x68, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x73, 0x6f, 0x64, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x73, 0x6f,
	0x64, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x28, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x74, 0x74, 0x73, 0x2e, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x06, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69,
	0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xdc, 0x01, 0x0a, 0x25, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x97, 0x01, 0x0a, 0x26, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x76,
	0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc5, 0x01, 0x0a, 0x24, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x4a, 0x0a, 0x0a, 0x61, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x61, 0x73, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x09, 0x61, 0x73, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x51,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x11,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6e, 0x74, 0x5f,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x6e, 0x74, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72,
	0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x3d, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x22, 0x81, 0x01, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e,
	0x6d, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69,
	0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22, 0xb1, 0x02, 0x0a, 0x19, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61,
	0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x44, 0x0a,
	0x0c, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x72, 0x63, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x72, 0x63, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x67, 0x74, 0x5f,
	0x6c, 0x61, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x67, 0x74, 0x4c,
	0x61, 0x6e, 0x67, 0x1a, 0x75, 0x0a, 0x0e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa4, 0x04, 0x0a, 0x0f, 0x52,
	0x69, 0x76, 0x61, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60,
	0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x25, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x75, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x50, 0x61, 0x69, 0x72, 0x73, 0x12, 0x29,
	0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74,
	0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6e, 0x76, 0x69, 0x64,
	0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x97, 0x01, 0x0a, 0x1e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x36, 0x2e, 0x6e, 0x76, 0x69,
	0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x37, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61,
	0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x9d, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x38, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e,
	0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e, 0x6d, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x54, 0x6f, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x39, 0x2e, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2e, 0x6e,
	0x6d, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x1b, 0x5a, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x69, 0x76, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0xf8, 0x01, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_riva_proto_riva_nmt_proto_rawDescOnce sync.Once
	file_riva_proto_riva_nmt_proto_rawDescData []byte
)

func file_riva_proto_riva_nmt_proto_rawDescGZIP() []byte {
	file_riva_proto_riva_nmt_proto_rawDescOnce.Do(func() {
		file_riva_proto_riva_nmt_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_riva_proto_riva_nmt_proto_rawDesc), len(file_riva_proto_riva_nmt_proto_rawDesc)))
	})
	return file_riva_proto_riva_nmt_proto_rawDescData
}

var file_riva_proto_riva_nmt_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_riva_proto_riva_nmt_proto_goTypes = []any{
	(*StreamingTranslateSpeechToSpeechConfig)(nil),   // 0: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechConfig
	(*StreamingTranslateSpeechToSpeechRequest)(nil),  // 1: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechRequest
	(*TranslationConfig)(nil),                        // 2: nvidia.riva.nmt.TranslationConfig
	(*SynthesizeSpeechConfig)(nil),                   // 3: nvidia.riva.nmt.SynthesizeSpeechConfig
	(*StreamingTranslateSpeechToSpeechResponse)(nil), // 4: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechResponse
	(*StreamingTranslateSpeechToTextRequest)(nil),    // 5: nvidia.riva.nmt.StreamingTranslateSpeechToTextRequest
	(*StreamingTranslateSpeechToTextResponse)(nil),   // 6: nvidia.riva.nmt.StreamingTranslateSpeechToTextResponse
	(*StreamingTranslateSpeechToTextConfig)(nil),     // 7: nvidia.riva.nmt.StreamingTranslateSpeechToTextConfig
	(*TranslateTextRequest)(nil),                     // 8: nvidia.riva.nmt.TranslateTextRequest
	(*Translation)(nil),                              // 9: nvidia.riva.nmt.Translation
	(*TranslateTextResponse)(nil),                    // 10: nvidia.riva.nmt.TranslateTextResponse
	(*AvailableLanguageRequest)(nil),                 // 11: nvidia.riva.nmt.AvailableLanguageRequest
	(*AvailableLanguageResponse)(nil),                // 12: nvidia.riva.nmt.AvailableLanguageResponse
	(*AvailableLanguageResponse_LanguagePair)(nil),   // 13: nvidia.riva.nmt.AvailableLanguageResponse.LanguagePair
	nil,                                // 14: nvidia.riva.nmt.AvailableLanguageResponse.LanguagesEntry
	(*StreamingRecognitionConfig)(nil), // 15: nvidia.riva.asr.StreamingRecognitionConfig
	(*RequestId)(nil),                  // 16: nvidia.riva.RequestId
	(AudioEncoding)(0),                 // 17: nvidia.riva.AudioEncoding
	(*SynthesizeSpeechResponse)(nil),   // 18: nvidia.riva.tts.SynthesizeSpeechResponse
	(*StreamingRecognitionResult)(nil), // 19: nvidia.riva.asr.StreamingRecognitionResult
}
var file_riva_proto_riva_nmt_proto_depIdxs = []int32{
	15, // 0: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechConfig.asr_config:type_name -> nvidia.riva.asr.StreamingRecognitionConfig
	3,  // 1: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechConfig.tts_config:type_name -> nvidia.riva.nmt.SynthesizeSpeechConfig
	2,  // 2: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechConfig.translation_config:type_name -> nvidia.riva.nmt.TranslationConfig
	0,  // 3: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechRequest.config:type_name -> nvidia.riva.nmt.StreamingTranslateSpeechToSpeechConfig
	16, // 4: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechRequest.id:type_name -> nvidia.riva.RequestId
	17, // 5: nvidia.riva.nmt.SynthesizeSpeechConfig.encoding:type_name -> nvidia.riva.AudioEncoding
	18, // 6: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechResponse.speech:type_name -> nvidia.riva.tts.SynthesizeSpeechResponse
	16, // 7: nvidia.riva.nmt.StreamingTranslateSpeechToSpeechResponse.id:type_name -> nvidia.riva.RequestId
	7,  // 8: nvidia.riva.nmt.StreamingTranslateSpeechToTextRequest.config:type_name -> nvidia.riva.nmt.StreamingTranslateSpeechToTextConfig
	16, // 9: nvidia.riva.nmt.StreamingTranslateSpeechToTextRequest.id:type_name -> nvidia.riva.RequestId
	19, // 10: nvidia.riva.nmt.StreamingTranslateSpeechToTextResponse.results:type_name -> nvidia.riva.asr.StreamingRecognitionResult
	16, // 11: nvidia.riva.nmt.StreamingTranslateSpeechToTextResponse.id:type_name -> nvidia.riva.RequestId
	15, // 12: nvidia.riva.nmt.StreamingTranslateSpeechToTextConfig.asr_config:type_name -> nvidia.riva.asr.StreamingRecognitionConfig
	2,  // 13: nvidia.riva.nmt.StreamingTranslateSpeechToTextConfig.translation_config:type_name -> nvidia.riva.nmt.TranslationConfig
	16, // 14: nvidia.riva.nmt.TranslateTextRequest.id:type_name -> nvidia.riva.RequestId
	9,  // 15: nvidia.riva.nmt.TranslateTextResponse.translations:type_name -> nvidia.riva.nmt.Translation
	16, // 16: nvidia.riva.nmt.TranslateTextResponse.id:type_name -> nvidia.riva.RequestId
	14, // 17: nvidia.riva.nmt.AvailableLanguageResponse.languages:type_name -> nvidia.riva.nmt.AvailableLanguageResponse.LanguagesEntry
	13, // 18: nvidia.riva.nmt.AvailableLanguageResponse.LanguagesEntry.value:type_name -> nvidia.riva.nmt.AvailableLanguageResponse.LanguagePair
	8,  // 19: nvidia.riva.nmt.RivaTranslation.TranslateText:input_type -> nvidia.riva.nmt.TranslateTextRequest
	11, // 20: nvidia.riva.nmt.RivaTranslation.ListSupportedLanguagePairs:input_type -> nvidia.riva.nmt.AvailableLanguageRequest
	5,  // 21: nvidia.riva.nmt.RivaTranslation.StreamingTranslateSpeechToText:input_type -> nvidia.riva.nmt.StreamingTranslateSpeechToTextRequest
	1,  // 22: nvidia.riva.nmt.RivaTranslation.StreamingTranslateSpeechToSpeech:input_type -> nvidia.riva.nmt.StreamingTranslateSpeechToSpeechRequest
	10, // 23: nvidia.riva.nmt.RivaTranslation.TranslateText:output_type -> nvidia.riva.nmt.TranslateTextResponse
	12, // 24: nvidia.riva.nmt.RivaTranslation.ListSupportedLanguagePairs:output_type -> nvidia.riva.nmt.AvailableLanguageResponse
	6,  // 25: nvidia.riva.nmt.RivaTranslation.StreamingTranslateSpeechToText:output_type -> nvidia.riva.nmt.StreamingTranslateSpeechToTextResponse
	4,  // 26: nvidia.riva.nmt.RivaTranslation.StreamingTranslateSpeechToSpeech:output_type -> nvidia.riva.nmt.StreamingTranslateSpeechToSpeechResponse
	23, // [23:27] is the sub-list for method output_type
	19, // [19:23] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_riva_proto_riva_nmt_proto_init() }
func file_riva_proto_riva_nmt_proto_init() {
	if File_riva_proto_riva_nmt_proto != nil {
		return
	}
	file_riva_proto_riva_common_proto_init()
	file_riva_proto_riva_audio_proto_init()
	file_riva_proto_riva_asr_proto_init()
	file_riva_proto_riva_tts_proto_init()
	file_riva_proto_riva_nmt_proto_msgTypes[1].OneofWrappers = []any{
		(*StreamingTranslateSpeechToSpeechRequest_Config)(nil),
		(*StreamingTranslateSpeechToSpeechRequest_AudioContent)(nil),
	}
	file_riva_proto_riva_nmt_proto_msgTypes[5].OneofWrappers = []any{
		(*StreamingTranslateSpeechToTextRequest_Config)(nil),
		(*StreamingTranslateSpeechToTextRequest_AudioContent)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_riva_proto_riva_nmt_proto_rawDesc), len(file_riva_proto_riva_nmt_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_riva_proto_riva_nmt_proto_goTypes,
		DependencyIndexes: file_riva_proto_riva_nmt_proto_depIdxs,
		MessageInfos:      file_riva_proto_riva_nmt_proto_msgTypes,
	}.Build()
	File_riva_proto_riva_nmt_proto = out.File
	file_riva_proto_riva_nmt_proto_goTypes = nil
	file_riva_proto_riva_nmt_proto_depIdxs = nil
}
