// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: riva/proto/riva_asr.proto

package riva_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RivaSpeechRecognition_Recognize_FullMethodName                      = "/nvidia.riva.asr.RivaSpeechRecognition/Recognize"
	RivaSpeechRecognition_StreamingRecognize_FullMethodName             = "/nvidia.riva.asr.RivaSpeechRecognition/StreamingRecognize"
	RivaSpeechRecognition_GetRivaSpeechRecognitionConfig_FullMethodName = "/nvidia.riva.asr.RivaSpeechRecognition/GetRivaSpeechRecognitionConfig"
)

// RivaSpeechRecognitionClient is the client API for RivaSpeechRecognition service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The RivaSpeechRecognition service provides two mechanisms for converting
// speech to text.
type RivaSpeechRecognitionClient interface {
	// Recognize expects a RecognizeRequest and returns a RecognizeResponse. This
	// request will block until the audio is uploaded, processed, and a transcript
	// is returned.
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// StreamingRecognize is a non-blocking API call that allows audio data to be
	// fed to the server in chunks as it becomes available. Depending on the
	// configuration in the StreamingRecognizeRequest, intermediate results can be
	// sent back to the client. Recognition ends when the stream is closed by the
	// client.
	StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse], error)
	// Enables clients to request the configuration of the current ASR service, or
	// a specific model within the service.
	GetRivaSpeechRecognitionConfig(ctx context.Context, in *RivaSpeechRecognitionConfigRequest, opts ...grpc.CallOption) (*RivaSpeechRecognitionConfigResponse, error)
}

type rivaSpeechRecognitionClient struct {
	cc grpc.ClientConnInterface
}

func NewRivaSpeechRecognitionClient(cc grpc.ClientConnInterface) RivaSpeechRecognitionClient {
	return &rivaSpeechRecognitionClient{cc}
}

func (c *rivaSpeechRecognitionClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, RivaSpeechRecognition_Recognize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaSpeechRecognitionClient) StreamingRecognize(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &RivaSpeechRecognition_ServiceDesc.Streams[0], RivaSpeechRecognition_StreamingRecognize_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamingRecognizeRequest, StreamingRecognizeResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaSpeechRecognition_StreamingRecognizeClient = grpc.BidiStreamingClient[StreamingRecognizeRequest, StreamingRecognizeResponse]

func (c *rivaSpeechRecognitionClient) GetRivaSpeechRecognitionConfig(ctx context.Context, in *RivaSpeechRecognitionConfigRequest, opts ...grpc.CallOption) (*RivaSpeechRecognitionConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RivaSpeechRecognitionConfigResponse)
	err := c.cc.Invoke(ctx, RivaSpeechRecognition_GetRivaSpeechRecognitionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RivaSpeechRecognitionServer is the server API for RivaSpeechRecognition service.
// All implementations must embed UnimplementedRivaSpeechRecognitionServer
// for forward compatibility.
//
// The RivaSpeechRecognition service provides two mechanisms for converting
// speech to text.
type RivaSpeechRecognitionServer interface {
	// Recognize expects a RecognizeRequest and returns a RecognizeResponse. This
	// request will block until the audio is uploaded, processed, and a transcript
	// is returned.
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// StreamingRecognize is a non-blocking API call that allows audio data to be
	// fed to the server in chunks as it becomes available. Depending on the
	// configuration in the StreamingRecognizeRequest, intermediate results can be
	// sent back to the client. Recognition ends when the stream is closed by the
	// client.
	StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]) error
	// Enables clients to request the configuration of the current ASR service, or
	// a specific model within the service.
	GetRivaSpeechRecognitionConfig(context.Context, *RivaSpeechRecognitionConfigRequest) (*RivaSpeechRecognitionConfigResponse, error)
	mustEmbedUnimplementedRivaSpeechRecognitionServer()
}

// UnimplementedRivaSpeechRecognitionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRivaSpeechRecognitionServer struct{}

func (UnimplementedRivaSpeechRecognitionServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedRivaSpeechRecognitionServer) StreamingRecognize(grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamingRecognize not implemented")
}
func (UnimplementedRivaSpeechRecognitionServer) GetRivaSpeechRecognitionConfig(context.Context, *RivaSpeechRecognitionConfigRequest) (*RivaSpeechRecognitionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRivaSpeechRecognitionConfig not implemented")
}
func (UnimplementedRivaSpeechRecognitionServer) mustEmbedUnimplementedRivaSpeechRecognitionServer() {}
func (UnimplementedRivaSpeechRecognitionServer) testEmbeddedByValue()                               {}

// UnsafeRivaSpeechRecognitionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivaSpeechRecognitionServer will
// result in compilation errors.
type UnsafeRivaSpeechRecognitionServer interface {
	mustEmbedUnimplementedRivaSpeechRecognitionServer()
}

func RegisterRivaSpeechRecognitionServer(s grpc.ServiceRegistrar, srv RivaSpeechRecognitionServer) {
	// If the following call pancis, it indicates UnimplementedRivaSpeechRecognitionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RivaSpeechRecognition_ServiceDesc, srv)
}

func _RivaSpeechRecognition_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaSpeechRecognitionServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaSpeechRecognition_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaSpeechRecognitionServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaSpeechRecognition_StreamingRecognize_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RivaSpeechRecognitionServer).StreamingRecognize(&grpc.GenericServerStream[StreamingRecognizeRequest, StreamingRecognizeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type RivaSpeechRecognition_StreamingRecognizeServer = grpc.BidiStreamingServer[StreamingRecognizeRequest, StreamingRecognizeResponse]

func _RivaSpeechRecognition_GetRivaSpeechRecognitionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RivaSpeechRecognitionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaSpeechRecognitionServer).GetRivaSpeechRecognitionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaSpeechRecognition_GetRivaSpeechRecognitionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaSpeechRecognitionServer).GetRivaSpeechRecognitionConfig(ctx, req.(*RivaSpeechRecognitionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RivaSpeechRecognition_ServiceDesc is the grpc.ServiceDesc for RivaSpeechRecognition service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivaSpeechRecognition_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.riva.asr.RivaSpeechRecognition",
	HandlerType: (*RivaSpeechRecognitionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _RivaSpeechRecognition_Recognize_Handler,
		},
		{
			MethodName: "GetRivaSpeechRecognitionConfig",
			Handler:    _RivaSpeechRecognition_GetRivaSpeechRecognitionConfig_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingRecognize",
			Handler:       _RivaSpeechRecognition_StreamingRecognize_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "riva/proto/riva_asr.proto",
}
