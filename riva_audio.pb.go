// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.2
// source: riva/proto/riva_audio.proto

package riva_speech

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// AudioEncoding specifies the encoding of the audio bytes in the encapsulating
// message.
type AudioEncoding int32

const (
	// Not specified.
	AudioEncoding_ENCODING_UNSPECIFIED AudioEncoding = 0
	// Uncompressed 16-bit signed little-endian samples (Linear PCM).
	AudioEncoding_LINEAR_PCM AudioEncoding = 1
	// `FLAC` (Free Lossless Audio
	// Codec) is the recommended encoding because it is
	// lossless--therefore recognition is not compromised--and
	// requires only about half the bandwidth of `LINEAR16`. `FLAC` stream
	// encoding supports 16-bit and 24-bit samples, however, not all fields in
	// `STREAMINFO` are supported.
	AudioEncoding_FLAC AudioEncoding = 2
	// 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
	AudioEncoding_MULAW   AudioEncoding = 3
	AudioEncoding_OGGOPUS AudioEncoding = 4
	// 8-bit samples that compand 13-bit audio samples using G.711 PCMU/a-law.
	AudioEncoding_ALAW AudioEncoding = 20
)

// Enum value maps for AudioEncoding.
var (
	AudioEncoding_name = map[int32]string{
		0:  "ENCODING_UNSPECIFIED",
		1:  "LINEAR_PCM",
		2:  "FLAC",
		3:  "MULAW",
		4:  "OGGOPUS",
		20: "ALAW",
	}
	AudioEncoding_value = map[string]int32{
		"ENCODING_UNSPECIFIED": 0,
		"LINEAR_PCM":           1,
		"FLAC":                 2,
		"MULAW":                3,
		"OGGOPUS":              4,
		"ALAW":                 20,
	}
)

func (x AudioEncoding) Enum() *AudioEncoding {
	p := new(AudioEncoding)
	*p = x
	return p
}

func (x AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_riva_proto_riva_audio_proto_enumTypes[0].Descriptor()
}

func (AudioEncoding) Type() protoreflect.EnumType {
	return &file_riva_proto_riva_audio_proto_enumTypes[0]
}

func (x AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AudioEncoding.Descriptor instead.
func (AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_riva_proto_riva_audio_proto_rawDescGZIP(), []int{0}
}

var File_riva_proto_riva_audio_proto protoreflect.FileDescriptor

var file_riva_proto_riva_audio_proto_rawDesc = string([]byte{
	0x0a, 0x1b, 0x72, 0x69, 0x76, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x69, 0x76,
	0x61, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6e,
	0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x72, 0x69, 0x76, 0x61, 0x2a, 0x65, 0x0a, 0x0d, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x14, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f,
	0x50, 0x43, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x4c, 0x41, 0x43, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x4d, 0x55, 0x4c, 0x41, 0x57, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x47,
	0x47, 0x4f, 0x50, 0x55, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x4c, 0x41, 0x57, 0x10,
	0x14, 0x42, 0x1b, 0x5a, 0x16, 0x6e, 0x76, 0x69, 0x64, 0x69, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x72, 0x69, 0x76, 0x61, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0xf8, 0x01, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_riva_proto_riva_audio_proto_rawDescOnce sync.Once
	file_riva_proto_riva_audio_proto_rawDescData []byte
)

func file_riva_proto_riva_audio_proto_rawDescGZIP() []byte {
	file_riva_proto_riva_audio_proto_rawDescOnce.Do(func() {
		file_riva_proto_riva_audio_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_riva_proto_riva_audio_proto_rawDesc), len(file_riva_proto_riva_audio_proto_rawDesc)))
	})
	return file_riva_proto_riva_audio_proto_rawDescData
}

var file_riva_proto_riva_audio_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_riva_proto_riva_audio_proto_goTypes = []any{
	(AudioEncoding)(0), // 0: nvidia.riva.AudioEncoding
}
var file_riva_proto_riva_audio_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_riva_proto_riva_audio_proto_init() }
func file_riva_proto_riva_audio_proto_init() {
	if File_riva_proto_riva_audio_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_riva_proto_riva_audio_proto_rawDesc), len(file_riva_proto_riva_audio_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_riva_proto_riva_audio_proto_goTypes,
		DependencyIndexes: file_riva_proto_riva_audio_proto_depIdxs,
		EnumInfos:         file_riva_proto_riva_audio_proto_enumTypes,
	}.Build()
	File_riva_proto_riva_audio_proto = out.File
	file_riva_proto_riva_audio_proto_goTypes = nil
	file_riva_proto_riva_audio_proto_depIdxs = nil
}
