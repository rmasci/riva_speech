// SPDX-FileCopyrightText: Copyright (c) 2022 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
// SPDX-License-Identifier: MIT

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: riva/proto/riva_nlp.proto

package riva_speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RivaLanguageUnderstanding_ClassifyText_FullMethodName     = "/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyText"
	RivaLanguageUnderstanding_ClassifyTokens_FullMethodName   = "/nvidia.riva.nlp.RivaLanguageUnderstanding/ClassifyTokens"
	RivaLanguageUnderstanding_TransformText_FullMethodName    = "/nvidia.riva.nlp.RivaLanguageUnderstanding/TransformText"
	RivaLanguageUnderstanding_AnalyzeEntities_FullMethodName  = "/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeEntities"
	RivaLanguageUnderstanding_AnalyzeIntent_FullMethodName    = "/nvidia.riva.nlp.RivaLanguageUnderstanding/AnalyzeIntent"
	RivaLanguageUnderstanding_PunctuateText_FullMethodName    = "/nvidia.riva.nlp.RivaLanguageUnderstanding/PunctuateText"
	RivaLanguageUnderstanding_NaturalQuery_FullMethodName     = "/nvidia.riva.nlp.RivaLanguageUnderstanding/NaturalQuery"
	RivaLanguageUnderstanding_GetRivaNLPConfig_FullMethodName = "/nvidia.riva.nlp.RivaLanguageUnderstanding/GetRivaNLPConfig"
)

// RivaLanguageUnderstandingClient is the client API for RivaLanguageUnderstanding service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RivaLanguageUnderstandingClient interface {
	// Deprecated: Do not use.
	// ClassifyText takes as input an input/query string and parameters related
	// to the requested model to use to evaluate the text. The service evaluates
	// the text with the requested model, and returns one or more classifications.
	ClassifyText(ctx context.Context, in *TextClassRequest, opts ...grpc.CallOption) (*TextClassResponse, error)
	// Deprecated: Do not use.
	// ClassifyTokens takes as input either a string or list of tokens and
	// parameters related to which model to use. The service evaluates the text
	// with the requested model, performing additional tokenization if necessary,
	// and returns one or more class labels per token.
	ClassifyTokens(ctx context.Context, in *TokenClassRequest, opts ...grpc.CallOption) (*TokenClassResponse, error)
	// TransformText takes an input/query string and parameters related to the
	// requested model and returns another string. The behavior of the function
	// is defined entirely by the underlying model and may be used for
	// tasks like translation, adding punctuation, augment the input directly,
	// etc.
	TransformText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error)
	// Deprecated: Do not use.
	// AnalyzeEntities accepts an input string and returns all named entities
	// within the text, as well as a category and likelihood.
	AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*TokenClassResponse, error)
	// Deprecated: Do not use.
	// AnalyzeIntent accepts an input string and returns the most likely
	// intent as well as slots relevant to that intent.
	//
	// The model requires that a valid "domain" be passed in, and optionally
	// supports including a previous intent classification result to provide
	// context for the model.
	AnalyzeIntent(ctx context.Context, in *AnalyzeIntentRequest, opts ...grpc.CallOption) (*AnalyzeIntentResponse, error)
	// PunctuateText takes text with no- or limited- punctuation and returns
	// the same text with corrected punctuation and capitalization.
	PunctuateText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error)
	// Deprecated: Do not use.
	// NaturalQuery is a search function that enables querying one or more
	// documents or contexts with a query that is written in natural language.
	NaturalQuery(ctx context.Context, in *NaturalQueryRequest, opts ...grpc.CallOption) (*NaturalQueryResponse, error)
	// Enables clients to request the configuration of the current ASR service, or
	// a specific model within the service.
	GetRivaNLPConfig(ctx context.Context, in *RivaNLPConfigRequest, opts ...grpc.CallOption) (*RivaNLPConfigResponse, error)
}

type rivaLanguageUnderstandingClient struct {
	cc grpc.ClientConnInterface
}

func NewRivaLanguageUnderstandingClient(cc grpc.ClientConnInterface) RivaLanguageUnderstandingClient {
	return &rivaLanguageUnderstandingClient{cc}
}

// Deprecated: Do not use.
func (c *rivaLanguageUnderstandingClient) ClassifyText(ctx context.Context, in *TextClassRequest, opts ...grpc.CallOption) (*TextClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextClassResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_ClassifyText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *rivaLanguageUnderstandingClient) ClassifyTokens(ctx context.Context, in *TokenClassRequest, opts ...grpc.CallOption) (*TokenClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenClassResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_ClassifyTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaLanguageUnderstandingClient) TransformText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextTransformResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_TransformText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *rivaLanguageUnderstandingClient) AnalyzeEntities(ctx context.Context, in *AnalyzeEntitiesRequest, opts ...grpc.CallOption) (*TokenClassResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenClassResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_AnalyzeEntities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *rivaLanguageUnderstandingClient) AnalyzeIntent(ctx context.Context, in *AnalyzeIntentRequest, opts ...grpc.CallOption) (*AnalyzeIntentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnalyzeIntentResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_AnalyzeIntent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaLanguageUnderstandingClient) PunctuateText(ctx context.Context, in *TextTransformRequest, opts ...grpc.CallOption) (*TextTransformResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextTransformResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_PunctuateText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *rivaLanguageUnderstandingClient) NaturalQuery(ctx context.Context, in *NaturalQueryRequest, opts ...grpc.CallOption) (*NaturalQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NaturalQueryResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_NaturalQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rivaLanguageUnderstandingClient) GetRivaNLPConfig(ctx context.Context, in *RivaNLPConfigRequest, opts ...grpc.CallOption) (*RivaNLPConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RivaNLPConfigResponse)
	err := c.cc.Invoke(ctx, RivaLanguageUnderstanding_GetRivaNLPConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RivaLanguageUnderstandingServer is the server API for RivaLanguageUnderstanding service.
// All implementations must embed UnimplementedRivaLanguageUnderstandingServer
// for forward compatibility.
type RivaLanguageUnderstandingServer interface {
	// Deprecated: Do not use.
	// ClassifyText takes as input an input/query string and parameters related
	// to the requested model to use to evaluate the text. The service evaluates
	// the text with the requested model, and returns one or more classifications.
	ClassifyText(context.Context, *TextClassRequest) (*TextClassResponse, error)
	// Deprecated: Do not use.
	// ClassifyTokens takes as input either a string or list of tokens and
	// parameters related to which model to use. The service evaluates the text
	// with the requested model, performing additional tokenization if necessary,
	// and returns one or more class labels per token.
	ClassifyTokens(context.Context, *TokenClassRequest) (*TokenClassResponse, error)
	// TransformText takes an input/query string and parameters related to the
	// requested model and returns another string. The behavior of the function
	// is defined entirely by the underlying model and may be used for
	// tasks like translation, adding punctuation, augment the input directly,
	// etc.
	TransformText(context.Context, *TextTransformRequest) (*TextTransformResponse, error)
	// Deprecated: Do not use.
	// AnalyzeEntities accepts an input string and returns all named entities
	// within the text, as well as a category and likelihood.
	AnalyzeEntities(context.Context, *AnalyzeEntitiesRequest) (*TokenClassResponse, error)
	// Deprecated: Do not use.
	// AnalyzeIntent accepts an input string and returns the most likely
	// intent as well as slots relevant to that intent.
	//
	// The model requires that a valid "domain" be passed in, and optionally
	// supports including a previous intent classification result to provide
	// context for the model.
	AnalyzeIntent(context.Context, *AnalyzeIntentRequest) (*AnalyzeIntentResponse, error)
	// PunctuateText takes text with no- or limited- punctuation and returns
	// the same text with corrected punctuation and capitalization.
	PunctuateText(context.Context, *TextTransformRequest) (*TextTransformResponse, error)
	// Deprecated: Do not use.
	// NaturalQuery is a search function that enables querying one or more
	// documents or contexts with a query that is written in natural language.
	NaturalQuery(context.Context, *NaturalQueryRequest) (*NaturalQueryResponse, error)
	// Enables clients to request the configuration of the current ASR service, or
	// a specific model within the service.
	GetRivaNLPConfig(context.Context, *RivaNLPConfigRequest) (*RivaNLPConfigResponse, error)
	mustEmbedUnimplementedRivaLanguageUnderstandingServer()
}

// UnimplementedRivaLanguageUnderstandingServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRivaLanguageUnderstandingServer struct{}

func (UnimplementedRivaLanguageUnderstandingServer) ClassifyText(context.Context, *TextClassRequest) (*TextClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyText not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) ClassifyTokens(context.Context, *TokenClassRequest) (*TokenClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClassifyTokens not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) TransformText(context.Context, *TextTransformRequest) (*TextTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransformText not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) AnalyzeEntities(context.Context, *AnalyzeEntitiesRequest) (*TokenClassResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeEntities not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) AnalyzeIntent(context.Context, *AnalyzeIntentRequest) (*AnalyzeIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeIntent not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) PunctuateText(context.Context, *TextTransformRequest) (*TextTransformResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PunctuateText not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) NaturalQuery(context.Context, *NaturalQueryRequest) (*NaturalQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NaturalQuery not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) GetRivaNLPConfig(context.Context, *RivaNLPConfigRequest) (*RivaNLPConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRivaNLPConfig not implemented")
}
func (UnimplementedRivaLanguageUnderstandingServer) mustEmbedUnimplementedRivaLanguageUnderstandingServer() {
}
func (UnimplementedRivaLanguageUnderstandingServer) testEmbeddedByValue() {}

// UnsafeRivaLanguageUnderstandingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RivaLanguageUnderstandingServer will
// result in compilation errors.
type UnsafeRivaLanguageUnderstandingServer interface {
	mustEmbedUnimplementedRivaLanguageUnderstandingServer()
}

func RegisterRivaLanguageUnderstandingServer(s grpc.ServiceRegistrar, srv RivaLanguageUnderstandingServer) {
	// If the following call pancis, it indicates UnimplementedRivaLanguageUnderstandingServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RivaLanguageUnderstanding_ServiceDesc, srv)
}

func _RivaLanguageUnderstanding_ClassifyText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).ClassifyText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_ClassifyText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).ClassifyText(ctx, req.(*TextClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_ClassifyTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).ClassifyTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_ClassifyTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).ClassifyTokens(ctx, req.(*TokenClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_TransformText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).TransformText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_TransformText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).TransformText(ctx, req.(*TextTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_AnalyzeEntities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeEntitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).AnalyzeEntities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_AnalyzeEntities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).AnalyzeEntities(ctx, req.(*AnalyzeEntitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_AnalyzeIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).AnalyzeIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_AnalyzeIntent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).AnalyzeIntent(ctx, req.(*AnalyzeIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_PunctuateText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextTransformRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).PunctuateText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_PunctuateText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).PunctuateText(ctx, req.(*TextTransformRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_NaturalQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NaturalQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).NaturalQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_NaturalQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).NaturalQuery(ctx, req.(*NaturalQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RivaLanguageUnderstanding_GetRivaNLPConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RivaNLPConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RivaLanguageUnderstandingServer).GetRivaNLPConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RivaLanguageUnderstanding_GetRivaNLPConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RivaLanguageUnderstandingServer).GetRivaNLPConfig(ctx, req.(*RivaNLPConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RivaLanguageUnderstanding_ServiceDesc is the grpc.ServiceDesc for RivaLanguageUnderstanding service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RivaLanguageUnderstanding_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nvidia.riva.nlp.RivaLanguageUnderstanding",
	HandlerType: (*RivaLanguageUnderstandingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClassifyText",
			Handler:    _RivaLanguageUnderstanding_ClassifyText_Handler,
		},
		{
			MethodName: "ClassifyTokens",
			Handler:    _RivaLanguageUnderstanding_ClassifyTokens_Handler,
		},
		{
			MethodName: "TransformText",
			Handler:    _RivaLanguageUnderstanding_TransformText_Handler,
		},
		{
			MethodName: "AnalyzeEntities",
			Handler:    _RivaLanguageUnderstanding_AnalyzeEntities_Handler,
		},
		{
			MethodName: "AnalyzeIntent",
			Handler:    _RivaLanguageUnderstanding_AnalyzeIntent_Handler,
		},
		{
			MethodName: "PunctuateText",
			Handler:    _RivaLanguageUnderstanding_PunctuateText_Handler,
		},
		{
			MethodName: "NaturalQuery",
			Handler:    _RivaLanguageUnderstanding_NaturalQuery_Handler,
		},
		{
			MethodName: "GetRivaNLPConfig",
			Handler:    _RivaLanguageUnderstanding_GetRivaNLPConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "riva/proto/riva_nlp.proto",
}
